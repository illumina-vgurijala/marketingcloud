<apex:page sidebar="false" showHeader="false" standardStylesheets="false" docType="html-5.0" tabStyle="openq__Interaction__c" applyBodyTag="false" extensions="openq.CreateInteractionForm,openq.RemoteActions,openq.LookUpList" standardController="openq__Interaction__c">
<meta name="viewport" content="width=device-width, initial-scale=1" />
<apex:stylesheet value="{!URLFOR($Resource.openq__StylesScriptsImages, 'css/interactionDashboard.css')}"/>       
<apex:stylesheet value="{!URLFOR($Resource.openq__StylesScriptsImages, 'css/defineCreateInteraction.css')}"/>

<apex:includescript value="https://ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js"></apex:includescript>
    <apex:includescript value="https://ajax.googleapis.com/ajax/libs/jqueryui/1.10.2/jquery-ui.min.js"></apex:includescript>
     
    

    <apex:stylesheet value="{!URLFOR($Resource.openq__Styles_StandAlone, 'css/customJQUI.css')}"/>
    <apex:stylesheet value="{!URLFOR($Resource.openq__Styles_StandAlone, 'css/jquery-ui.css')}"/>
    <apex:stylesheet value="{!URLFOR($Resource.openq__StylesScriptsImages, 'css/common.css')}"/>
    <apex:stylesheet value="{!URLFOR($Resource.openq__StylesScriptsImages, 'css/style2.css')}"/> 
    <apex:stylesheet value="{!URLFOR($Resource.openq__StylesScriptsImages, 'css/interactionMix.css')}"/> 
  
    
    <apex:stylesheet value="{!URLFOR($Resource.openq__StylesScriptsImages, 'css/autoSuggest.css')}"/>
    <apex:stylesheet value="{!URLFOR($Resource.openq__StylesScriptsImages, 'css/f-combobox.css')}"/>
    
    <apex:stylesheet value="{!URLFOR($Resource.openq__StylesScriptsImages, 'css/jquery.multiselect.css')}"/>
    <apex:includeScript value="{!URLFOR($Resource.openq__StylesScriptsImages, 'scripts/jquery.scrollTo-min.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.openq__StylesScriptsImages, 'scripts/jquery.autoSuggest.1.6.2.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.openq__StylesScriptsImages, 'scripts/ui.combobox.r.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.openq__StylesScriptsImages, 'scripts/f-combobox.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.openq__StylesScriptsImages, 'scripts/common-functions.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.openq__StylesScriptsImages, 'scripts/jquery.multiselect.min.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.openq__StylesScriptsImages, 'scripts/jquery.timepicker.js')}"/>      
     
     <style>
   
         
    
    
        .ui-datepicker-prev span {
            width: 20px;
            height: 20px;
            background-position: 0 -20px;
            cursor: pointer;
            background-image: url({!URLFOR($Resource.StylesScriptsImages,'img/datepicker-arrows.png')});
        }
        
        .ui-widget-combobox + .ui-button .ui-icon {
        
            background: url({!URLFOR($Resource.StylesScriptsImages,'img/main-nav-sprite.png')}) no-repeat 0 -368px;
        }
    
        .ui-datepicker-next{
            background-image: url({!URLFOR($Resource.StylesScriptsImages,'/img/datepicker-arrows.png')});
            background-position: 0 0;
            cursor: pointer;
            height: 20px;
            width: 20px;
        }
        
        .ui-datepicker-prev{
            background-image: url({!URLFOR($Resource.StylesScriptsImages,'/img/datepicker-arrows.png')});
            background-position: 0 -16px;
            cursor: pointer;
            height: 20px;
            width: 20px;
        }
    
        <!-- Although these styles should be in interactionsdashboard.page, background-images don't work in Internet explorer when we do (SFDC Bug? )-->
        
        /*dashboard*/
        .settings {    
            width: 16px;
            height: 16px;
            background-position: 0px -1px;          
            background-image: url({!URLFOR($Resource.StandaloneCommonImages,'img/cogsprite.png')});
        }
    
        .arrowSortIcon{
        
            position: absolute;
            float: right;
            top: 3px;
            height: 16px;
            width: 16px;
            background-image: url({!URLFOR($Resource.StandaloneCommonImages,'img/arrowUpDown.png')});
        }
        
        .newObject{     
        }
        .easyAdd{
            background-image: url({!URLFOR($Resource.StylesScriptsImages,'img/plus.png')}) !important;
        }
        
        .eyesIcon {
         
            float: left;
            width:48px;
            height:48px;
            background-image: url("{!URLFOR($Resource.StylesScriptsImages,'img/icon_eye.png')}");
            cursor:pointer;
            margin-top:1px;
        }
        
    
        .lessNumeric{
            float: left;
            width:17px;
            height:17px;
            background-image: url("{!URLFOR($Resource.StylesScriptsImages,'img/less.png')}");
            cursor:pointer;
            margin-top:1px;
        }
        .numericInput{
         margin: 0 10px;
        }
        .plassNumeric{
            float: left;
            width:17px;
            height:17px;
            background-image: url("{!URLFOR($Resource.StylesScriptsImages,'img/plus.png')}");
            cursor:pointer;
            margin-top:1px;
        }
        .saveAndNewMobile{
            background-image:url("{!URLFOR($Resource.StylesScriptsImages,'img/disk_save_new.png')}");
            width:32px;
            height:32px;

        }
        .saveMobile{
            background-image:url("{!URLFOR($Resource.StylesScriptsImages,'img/disk_save.png')}");
            width:32px;
            height:32px;

        }
     
        .boxContainer{
            margin: 10px;
            margin-top:0px;
            margin-bottom:20px;
        }
        .boxContainer input, boxContainer select{
            max-width:60%;
        }
        .fullWindowsModal {
            background-color: #F1F1F0;
            display: none;
            height: 100%;
            left: 0;
            position: absolute;
            top: 0;
            width: 100%;
              padding: 0 !important;
              z-index: 999999;
        }
        .fullWindowsModal button{
             margin-left: 7px;
            margin-top: 7px;
        }
        html,body{
            height:auto;
        }
        fieldset{
            padding-left:0px;
        }
         .ui-widget-combobox + .ui-button .ui-icon {
        
            background: url({!URLFOR($Resource.StylesScriptsImages,'img/main-nav-sprite.png')}) no-repeat 0 -368px;
        }
        
    </style>

<apex:stylesheet value="{!URLFOR($Resource.openq__StylesScriptsImages, 'bootstrap/css/bootstrap.css')}"/> 
<apex:stylesheet value="{!URLFOR($Resource.openq__StylesScriptsImages, 'css/LookUpEmulator.css')}"/> 

<body class="bootstrapPrefix">

<div class="container" >    
 <apex:form >
            <nav class="navbar navbar-default navbar-fixed-top" role="navigation">
              <div class="container">
               <div class="navbar-header">
                  <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1">
                    <span class="sr-only">Toggle navigation</span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                  </button>
                  <div class="navbar-brand" style="float: none;">Actions</div>
                </div>
               <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1">
                  <ul class="nav navbar-nav">
                  
                    <li class="createNewInteraction" style="{!if(isNULL($CurrentPage.parameters.id),'display:none','display:block')}"><a href="#" onclick="createNew();" >Create&nbsp;New</a></li>
                    <li class="" style="margin-top: 2px;"><a href="#" onclick="save();" >Save</a></li>
                  </ul>
                 </div>
              </div>
            </nav>
            <apex:outputPanel id="pageMessageBlock">
                <apex:pageMessages />
            </apex:outputPanel>
            <apex:outputPanel layout="block"  id="mainInteractionFormWrapper" style="width:100%;">
                <apex:outputPanel id="PagelayoutSelectedID" rendered="{!isPageLAyoutSelected}">
                <div id="stick-footer">
                <div style="width:100%;position:relateive;" class="default clearFix order-sm layout-order">     
                    <div id="body2" class="layout-order-first"> 
                        <apex:outputPanel id="all2" >
                             
                        <div class="" id="attrSection">
                            <div class="marged" style="margin-top: 70px;margin-right:0px !important;margin-left: 0px  !important;">
                                <!-- Interaction Dynamic Header-->
                                <div class="cfix wi-gen">
                                 <c:PageLayoutsAttributesComponent id="pageLayoutComp" importStaticResource="true" pgController="{!plaController}" readOnly="false" initFunctionName="startComponent" showOnLoad="{!loadPLC}" /> 
                                </div>
                                <div id="section1" class="b-card {!IF(OR(iSttgs.Display_Attendees__c,iSttgs.Display_Attendees_Type__c),'wi-gen','')}" style="  padding-left: 16px;padding-right: 16px;">
                                    <apex:outputPanel id="AttendeesBlock" rendered="{!loadPLC}">
                                        <apex:outputpanel layout="none" rendered="{!iSttgs.openq__Display_Attendees__c}" >
                                        <div class="ver header-specific-wrap">
                                            <h1 class="header specific" style="font-weight:normal;border-bottom: none;padding-left: 0px;"><span style="padding:0 0 0 0; font-size: 16px; font-weight:bold;" >Attendees</span></h1>
                                        </div>
                                        <div>
                                            <apex:outputText value="*" styleClass="required" rendered="{!iSttgs.openq__Make_Attendees_Required__c}"/>
                                            <div class="attendeeNameText">
                                                Enter Name of Attendee(s)
                                            </div>
                                        </div>                                                                                  
                                        <div class="ver" id="attendees_list_field_container">
                                            <input type="text" name="attendees_list" id="attendees_list_field" />
                                        </div> 
                                        </apex:outputpanel>
                                        <apex:outputpanel layout="none" rendered="{!iSttgs.openq__Display_Attendees_Type__c}" >
                                            <h2 style="font-size:inherit;">Other Attendees</h2>             
                                            <div class="container-fluid" >
                                                <div class="row" >
                                                    <apex:repeat value="{!attendeeTypes}" var="at">
                                                        <div style="padding-top:5px;" class="col-xs-12 col-sm-6 col-md-{!12/attendeeTypes.size} col-lg-{!12/attendeeTypes.size}">
                                                            <apex:outputLabel style="margin-right: 5px;display:inline;" value="{!at.label}"></apex:outputLabel>
                                                            <div class="numericInputComp" style="float:none;">
                                                                <div class="lessNumeric"></div>
                                                                <input type="number" min="0" data-name="{!at.value}" class="numericInput numbers" value="{!at.num}"/>
                                                                <div class="plassNumeric"></div>
                                                            </div>
                                                        </div>
                                                    </apex:repeat>
                                                </div>
                                            </div>
                                            <div style="clear:left;"></div>                             
                                        </apex:outputpanel>
                                    </apex:outputPanel>
                                    <apex:outputPanel layout="block" style="margin-top: 15px; font-style:italic;" rendered="{!OR(iSttgs.openq__Display_Attendees__c, iSttgs.openq__Display_Attendees_Type__c)}">
                                        Total # of Attendees:&nbsp;<span id="attendee_num"></span>
                                    </apex:outputPanel> 
                                </div>                      
                            </div>
                        </div>  
                        <div id="relListSection">
                        

                                            
                 
                     
                        <div style="clear: both;"></div>
                        </div>
                        
                        <apex:actionFunction immediate="true" name="attendeeChangedApex" action="{!attendeeChanged}" oncomplete="bindImagesToFixIe();" rerender="refresh, casesLayout"  >
                            <apex:param name="param1" assignTo="{!selectedAttendeeIds}" value=""/> 
                        </apex:actionFunction>              
                        
                        <apex:actionFunction name="checkStatusApex" action="{!checkStatus}" oncomplete="bindImagesToFixIe();" rerender="refresh, openTasksLayout, casesLayout"  >
                            <apex:param name="param1" assignTo="{!taskToCheck}" value=""/> 
                            <apex:param name="param2" assignTo="{!taskFieldToCheck}" value=""/>
                        </apex:actionFunction>                  
                        
                        <apex:actionFunction name="saveInteractionApex" action="{!saveInteractionMobile}" rerender="pageMessageBlock,urlToSave" oncomplete="afterSave();bindImagesToFixIe();" >
                            <apex:param name="param1" assignTo="{!selectedAttendeeIds}" value=""/>  
                            <apex:param name="param3" assignTo="{!interactionDateStr}" value=""/>
                            <apex:param name="selectedAttendeeTypes" assignTo="{!attendeeTypeNumbers}" value=""/>
                            <apex:param name="param8" assignTo="{!saveAndNew}" value=""/>
                            <apex:param name="param9" assignTo="{!newAttachment}" value=""/>
                            <apex:param name="param10" assignTo="{!newContact}" value=""/>
                        </apex:actionFunction>
                        
                        <apex:actionFunction name="refreshAdvocacies" action="{!refreshAdvocacies}" oncomplete="bindImagesToFixIe();" rerender="pageMessageBlock"  >                    
                            <apex:param name="param1" assignTo="{!interactionDateStr}" value=""/>                   
                        </apex:actionFunction>      
                        
                        
                        </apex:outputPanel>    
                    </div>          
                </div>       
                    
                
                </div>
                
    <script src="{!URLFOR($Resource.StylesScriptsImages,'scripts/interactionsFormMobile.js')}" type="text/javascript" /> 
    
    <script src="{!URLFOR($Resource.StylesScriptsImages,'scripts/CreateInteractionForm.js')}" type="text/javascript" /> 
                
            </apex:outputPanel>
        </apex:outputPanel>
                    <script>
                 
                    
                    jQuery(document).ready(function(){
                        jQuery('.newObject').css('background-image','url({!URLFOR($Resource.openq__StylesScriptsImages,'img/plus.png')})');
                        jQuery('.settings').css('background-image','url({!URLFOR($Resource.openq__StandaloneCommonImages,'img/cogsprite.png')})');
                        jQuery('.settings').css('width','16px');
                        jQuery('.arrowSortIcon').css('background-image','url({!URLFOR($Resource.openq__StandaloneCommonImages,'img/arrowUpDown.png')})');
                     
                        
                        /**
                            check for only numeric values 
                        **/
                        bindNumericValidation();
                          
                     
                    });
                    var startExecuted=true;  
                    function save(){
                        waitOn();
                        attrComp.setCallBack(callBackRemoteActionSave);
                        attrComp.save();
                        jQuery('#bs-example-navbar-collapse-1').collapse('hide');
                    }
                        
                    function callBackRemoteActionSave(){
                        saveInteraction(false,false);   
                         
                    }
                    function saveAndNew(){
                        waitOn();   
                        attrComp.setCallBack(callBackRemoteActionSaveAndNew);
                        
                        attrComp.save();
                    }
                        
                    
                    function callBackRemoteActionSaveAndNew(){
                        waitOn();
                        saveInteraction(true,false);    
                    }
                    
                    function afterSave(){
                        waitOff();
                        alert('Your interaction has been created successfully');
                        jQuery('.createNewInteraction').show();
                        initRelatedList();
                    }
                    function createNew(){
                        waitOn();
                        if ( (typeof sforce != 'undefined' && typeof sforce.one !='undefined') && (sforce != null && sforce.one!=null) ) {
                        
                            sforce.one.navigateToURL('{!$Page.openq__InteractionMobile}');
                        }else{
                        
                            window.location.search='?tabIndex=1';
                        }
                    }
                    /**
                        numeric input validation
                    **/
                    
                    function bindNumericValidation(){
                        jQuery('.lessNumeric').click(function(){
  
                          var parent = jQuery(this).parent();
                          if(jQuery('.numericInput',parent).val()>0){
                            jQuery('.numericInput',parent).val(parseInt(jQuery('.numericInput',parent).val())-1)
                            jQuery('.numericInput',parent).change()
                          }
                        })
                        
                        jQuery('.plassNumeric').click(function(){
                          
                          var parent = jQuery(this).parent();
                         
                            jQuery('.numericInput',parent).val(parseInt(jQuery('.numericInput',parent).val())+1)
                            jQuery('.numericInput',parent).change()
                        })
                        jQuery('.numericInput').change(function(){
                            var patt = new RegExp(/\d/g);
                            var str = jQuery(this).val();
                            var res = str.match(patt);
                            if(res.length!=str.length){
                                
                                var val = parseInt(res.join(""))
                                val = (val<0)?0:val;
                                jQuery(this).val(val);
                                                  
                            }
                            attendeNumChanged();
                        })
                        jQuery('.numericInput').blur(function(){
                            var patt = new RegExp(/\d/g);
                            var str = jQuery(this).val();
                            var res = str.match(patt);
                            if(res.length!=str.length){
                                
                                var val = parseInt(res.join(""))
                                val = (val<0)?0:val;
                                jQuery(this).val(val);
                                                  
                            }
                            attendeNumChanged();
                        });
                    }
                    function startComponent(){
                     
                            startExecuted = false;
                            attrComp=new  AttributesComponent(jQuery('[id$="PageLayoutAttributes"]'));
                            attrComp.setCallBack(callBackRemoteActionSave);
                            attrComp.setFields(fields{!JSENCODE(plaController.objectName)},fieldsTP{!JSENCODE(plaController.objectName)});
                            attrComp.init();
                            //**hack internet explorer 
                            jQuery('img.ui-datepicker-trigger').css({'margin-left': '-16px', 'cursor': 'pointer', 'position': 'absolute' ,'margin-top': '8px' });                           
                            jQuery('.requiredField').css({'width':'1px','position':'absolute','margin-top':'8px','margin-left':'-5px'});
                            
                            initOpenqLookUp();
                    }
                    
                </script>
            
            <apex:outputPanel id="addAttendeejs">
                <script>
                    
                    var pref = eval("{!JSENCODE(preFill)}"); 
                    var getData = function(query, next){
                        Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.CreateInteractionForm.getContacts}',
                            query,
                            '{!JSENCODE(pageLayoutId)}',
                            function(result, event){
                                var res = [];
                                for(i=0;  i < result.length; i++){
                                    var name = result[i].Name.replace(/&#39;/g, "\'");
                                    res.push(result[i]);  
                                }
                                next(res, query);
                                if(event.type === 'exception'){
                                    console.log("exception");
                                    console.log(event);
                                }
                            },
                            {buffer: true, escape: true, timeout: 120000}
                        );
                    }
                    function initAttendees(){
                        jQuery('.ui-datepicker-trigger').attr("src",jQuery('#datepickerID').val());
                     
                        jQuery('#attendees_list_field')
                            .autoSuggest(getData, {asHtmlID : "attendees", selectedValuesProp : "Id", 
                                            selectedItemProp: "{!namespace}Contact_Full_Name__c", searchObjProps: "LastName, FirstName, {!namespace}OPENQ_Middle_Name__c",
                                            minChars: "2", startText: "", selectionAdded : attendeeAdded,
                                            selectionRemoved : attendeeRemoved, preFill : pref });
                        numAtt = pref.length;       
                        attendeNumChanged();
                    }
                    function resetAutoSuggest() {
                    
                        jQuery('#attendees_list_field_container').html('');
                        jQuery('#attendees_list_field_container').html('<input type="text" id="search_term" />');
                      
                            
                        jQuery('#search_term').autoSuggest(getData, {asHtmlID : "attendees", selectedValuesProp : "Id", 
                                                selectedItemProp: "{!namespace}Contact_Full_Name__c", searchObjProps: "LastName, FirstName, {!namespace}OPENQ_Middle_Name__c",
                                                minChars: "2", startText: "", selectionAdded : attendeeAdded,
                                                selectionRemoved : attendeeRemoved, preFill : pref });
                                            
                        numAtt = pref.length;                   
                        
                        attendeNumChanged();
                    }
                    
                    
                    function bindImagesToFixIe(){
                        jQuery('.lookupIcon').css('position','absolute');
                        jQuery('.newObject').css('background-image','url({!URLFOR($Resource.StylesScriptsImages,'img/plus.png')})');
                                jQuery('.settings').css('background-image','url({!URLFOR($Resource.StandaloneCommonImages,'img/cogsprite.png')})');
                                jQuery('.settings').css('width','16px');
                                jQuery('.arrowSortIcon').css('background-image','url({!URLFOR($Resource.StandaloneCommonImages,'img/arrowUpDown.png')})');
                                jQuery('.requiredField').css({'width':'1px','position':'absolute','margin-top':'8px','margin-left':'-5px'});
                    }
                    function disableDateFields(){
                    
                        jQuery('.dateInput.dateOnlyInput input').attr('readonly', 'readonly');
                    }
                </script>
                </apex:outputPanel>
                
                
        <apex:inputHidden value="{!urlToSave}" id="urlToSave" />        
                
                
        <apex:outputPanel layout="block" id="selectPageLayoutPopUp" rendered="{!!isPageLAyoutSelected}">
  
    
        <div id="popUpBkg" class="popUpBkg" ></div>
        <div id="popUpPageLayout" class="popUpDiv">
            <div id="newEventDiv">
                <div> 
                    <apex:outputPanel styleClass="popUpContainers">
                        <div class="widgetHeader">
                            Select Interaction Page Layout
                        </div>
                         
                        <div>
                            Page Layout: &nbsp;
                            <apex:selectList value="{!pageLayoutID}" multiselect="false" size="1">
                                <apex:selectOptions value="{!pageLayoutListSO}"/>
                            </apex:selectList>
                        </div>                          
                    </apex:outputPanel> 
                </div>
                <div>
                    <div style="float: right;">                     
                        <input type="button" value="Load" onclick="waitOn();loadPageLayout();"/>    
                        <input type="button" value="Cancel" onclick="clearInteractionFn();closePageLayoutPopUp();waitOff();jQuery('#tabs').tabs({active: parseInt(0)});"/>                                                  
                    </div>              
                </div>
            </div>
        </div>
            <script>
         
            function openPageLayoutPopUp(){
            
                jQuery('#popUpBkg').css('display', 'block');
                jQuery('#popUpPageLayout').css('display', 'block');
                waitOff();
                 
            }
            function closePageLayoutPopUp(){
            
                jQuery('#popUpBkg').css('display', 'none');
                jQuery('#popUpPageLayout').css('display', 'none');
                 
            }
            </script>
        </apex:outputPanel>
        <apex:outputPanel id="apexVars">
            <input type="hidden" value="{!newInteraction.id}" id="urlID" />
            <input type="hidden" value="{!!isPageLAyoutSelected}" id="selectPagelayoutId" />
            <input type="hidden" value="{!HTMLENCODE(interactionName)}" id="newInteractionName" />
            <input type="hidden" value="{!URLFOR($Resource.StylesScriptsImages,'img/datepicker-ico.png')}" id="datepickerID" />
            <input type="hidden" value="{!MONTH(DATEVALUE(newInteraction.Date__c))}/{!DAY(DATEVALUE(newInteraction.Date__c))}/{!YEAR(DATEVALUE(newInteraction.Date__c))}" id="InteractionDateID" />
            <apex:repeat value="{!attendeeTypes}" var="aty">
                <input type="hidden" class="openQHiddenAttendeeTypes" value="{!aty.num}" data-name="{!aty.value}" id="{!aty.value}"/>            
            </apex:repeat>  
        </apex:outputPanel>
    
        <apex:actionFunction name="displayPL" action="{!displayLoadPLC}" rerender="PagelayoutSelectedID,apexVars,addAttendeejs" oncomplete="bindImagesToFixIe();initInteractionFormComp();" />
        <apex:actionFunction name="clearInteractionFn" action="{!clearInteraction}" oncomplete="bindImagesToFixIe();waitOff();" rerender="mainInteractionFormWrapper,PagelayoutSelectedID,apexVars,AttendeesBlock,pageLayoutComp,refresh,addAttendeejs" />
        <apex:actionFunction name="loadPageLayout" action="{!initFunctionInteractionForm}"  rerender="mainInteractionFormWrapper,apexVars,AttendeesBlock,pageLayoutComp,refresh,addAttendeejs" oncomplete="bindImagesToFixIe();closePageLayoutPopUp();initInteractionFormComp();startExecuted=true;jQuery('#attendee_num').html('0');" />
        </apex:form> 
            <c:WaitComponent />     
</div>
<!--  here go the related list views -->
<div class="container-fluid fullWindowsModal">

</div>
<script type="text/template" id="tableWidgetRelatedList" >

    <div class="wi-gen blank gr tit" style="margin-top:20px;">  
        
                <a name="anchor<%=objectLabel%>"></a>                           
                                              
                <div class="rlWrapper wi-gen blank gr">
                    <div class="wbhc clearFix">
                        <h1 class="header-color"><%=objectLabel%></h1>                                                                                 
                    </div>
                    <table class="ul-list f-width">
                        <tr>
                             <td style="padding: 0 0 0 20px;vertical-align: middle;"><span><%=size%> record<%if(size != 1){%>s<%}%> to display</span> </td>
           
                            <td class="fright">
                            <!--si es attachment o empower no -->
                                <a onclick="">
                                    <span class="eyesIcon"></span>
                                </a>
                            </td>
                        </tr>       
                     </table>
                 </div>          
        
    </div>
</script>
<script type="text/template" id="listRelatedListTemplate" >

    <div class="rlHeader" >
        <button type="button" class="btn btn-primary goBack btn-md">Go Back</button>
        <h1 class="modalTitle"><%=labelObject%></h1>   
    </div>
<div class="rlHeader" style="top:50px;background-color:#F1F1F0;text-align:center;height:40px;">
        <button type="button" class="btn btn-success saveRelatedList btn-md">Save</button>
        <button type="button" class="btn btn-info newRelatedList btn-md" style="display:none;">Add Row</button>
</div>
<%var index = 0%>
<div class="listWrapper" style="position:absolute;top:120px;width:100%;">
</div>
 
</script>
<script type="text/template" id="RowRelatedTemplate" >
  
<div class="objectTab boxContainer col-xs-12 col-sm-12 col-ms-12 col-lg-12">
    <div class="row">
        <div class="col-xs-12 col-sm-12 col-ms-12 col-lg-12"  style="margin-top:10px;">
            <div class="errorMsg"></div>
        </div>
        <%if(objId!='' && objId!=null ){%>
            <div style="margin-top:10px; float:left;">  
                <button class="btn btn-mini viewSobject" onclick="navigateToSobject('<%=objId%>');" style="color:white; background-color: black;">View</button>             
            </div>
            <div style="margin-top:10px; float:left;">
                <button class="btn btn-mini btn-danger delSobject">Del</button>                             
            </div>
            <div style="clear: left;"></div>
        <%}%>
        <%if(objId=='' || objId==null ){%>
        <div class="col-xs-12 col-sm-12 col-ms-12 col-lg-12"  style="margin-top:10px; color:white;">
            <button class="btn btn-mini btn-inverse removeMod">Remove</button>                                          
        </div>
        <%}%>
        <section>

        </section>
        
    </div>
</div>
 
</script>
 
<script type="text/template" id='formLookUp' >

    <div class="col-xs-4 col-sm-4 col-ms-4 col-lg-4"  style="margin-top:10px;">
                <div class="fleft fieldLabel <%= (required)?'requiredFieldRelatedList': ''%>" style="white-space: nowrap; <%= ( required)? 'border-left:3px solid #CC0000;padding-left: 3px;': ''%>">
                    <%=label%>:
                </div>
            </div>
            <div class="col-xs-8 col-sm-8 col-ms-8 col-lg-8"  style="margin-top:10px;">
                <%=element%>
            </div>
</script>
<script src="{!URLFOR($Resource.StylesScriptsImages,'scripts/underscore.js')}" /> 
<script src="{!URLFOR($Resource.StylesScriptsImages,'scripts/backbone.js')}" /> 
<script src="{!URLFOR($Resource.StylesScriptsImages,'scripts/marionetteJS.js')}" />
<script src="{!URLFOR($Resource.StylesScriptsImages,'scripts/openqLookUp.js')}" />
<script src="{!URLFOR($Resource.StylesScriptsImages, 'bootstrap/js/bootstrap.js')}" /> 
<!-- Vars used on js -->
<input type="hidden" value="{!$RemoteAction.LookUpList.listObject}" id="LooUpEndPoint" /> 
<input type="hidden" value="{!$RemoteAction.LookUpList.getRowName}" id="getRowNameEndPoint" /> 
<input type="hidden" value="{!URLFOR($Resource.StylesScriptsImages,'scripts/')}"  id="baseURLID" />

<script type="text/template" id='lookUpEmulatorTemplate' >

<section>
<div class="container">
    <div class=" with-padding filterContainer" style="width:100%;" >
        <div class="inputCont">
            <input type="search" id="filterInput" value="" class="form-control"  placeholder="Search <%=objectLabel%>"/>
            <select id="selectOption" display="block" ></select>
            <button data-dismiss="modal" class="close" type="button"><span aria-hidden="true">×</span><span class="sr-only">Close</span></button>
        </div>
        <div class="filterWrapper list-group" style="overflow-y:scroll;height:500px;width:100%;">
         
    
        </div>
        <div class="loading">Loading...</div>
    </div>
</div>
</section>

</script>
 
<script>

    //Events when open or close the lookUp
        var wasVisible = false;
        lookUp.on('render',function(){
            wasVisible = jQuery('.fullWindowsModal').is(':visible')
            if(wasVisible){
                
             jQuery('.fullWindowsModal').hide();
            }
        });
        lookUp.on('close',function(){
            jQuery('.fullWindowsModal').is(':visible')
            if(wasVisible){
                wasVisible= false;
             jQuery('.fullWindowsModal').show();
            }
        });
        
var MyApp = new Backbone.Marionette.Application();
function initRelatedList(){
    if(jQuery('[id$=objectID]').val()!=''){
        MyApp.start();
        
    }
}
MyApp.addInitializer(function(){
        MyApp.RelatedListNew = new  RelatedListCollectionView(new RelatedListCollection());
        waitOn();
        MyApp.RelatedListNew.on('updated',function(){
            waitOn();
            MyApp.relatedListHeader.show(MyApp.RelatedListNew);
            waitOff();
        })

})

MyApp.addRegions({
    relatedListSection: 'form', 
    relatedListHeader:'#relListSection',
    relatedListInformation:'.fullWindowsModal'
})

 
/**
Related List Header
this models are related with the headers of the related list Contain
object label, number of rows related, and eyes icon to display a list of rows

**/

var RelatedListHeaderModel = Backbone.Model.extend({
    defaults:{
        labelObject:'',
        size:0,
        nameObject:'',
        relatedListId:''
    },
    initialize:function(){
    
    }
})
 
Marionette.Behaviors.behaviorsLookup = function() {
    return window.Behaviors;
}
var RelatedListsModel =  Backbone.Model.extend({
    defaults:{
        relatedListId : ' ',
        nameObject : ' ',
        labelObject : 'Loading...',
        fieldsInfo : {},
        records:{},
        collection:{},
        relationshipField:''
    },
    initialize:function(){
        var self = this;
        this.on('updated',function(){
            var rlmc = new RelatedListModelCollection( self.get('records'),{fields:self.get('fieldsInfo'),nameObject:self.get('nameObject'),relationshipField:self.get('relationshipField')});

            self.set('collection',rlmc);
            self.trigger('RelatedListsModel:updated');
            
            self.get('collection').on('collection:change',function(){
                self.trigger('RelatedListsModel:updated');

            })
        })
        this.fetch();
    },
    fetch:function(){
        var self = this;
        Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.CreateInteractionForm.relatedList}',jQuery('[id$=objectID]').val(),this.get('relatedListId'),function(e){
        
            self.set(JSON.parse(e)[0]);
            self.trigger('updated');
            
        },{escape:false});
    },
    addRow:function(){ 
        this.get('collection').addRow();
    }   
})
var ShowRelatedList = Marionette.Behavior.extend({
    events: {
        "click @ui.view": "show"
    },

  show: function() {
      
      var rlm = new RelatedListsModel({relatedListId:this.view.model.get('relatedListId')});
      var relView = new RelatedListView({model:rlm});
      MyApp.relatedListInformation.show(relView);     
      MyApp.relatedListSection.$el.hide();
      MyApp.relatedListInformation.$el.show();
      jQuery(document).scrollTop(0);
 
   }
});

window.Behaviors = new Object();
window.Behaviors.ShowRelatedList = ShowRelatedList;

var RelatedList = Backbone.Marionette.ItemView.extend({
    template:'#tableWidgetRelatedList',
    model:RelatedListHeaderModel,
    ui:{
        view : '.eyesIcon'
    }, 
    behaviors:{
        ShowRelatedList:{}
    }
})


var RelatedListCollection = Backbone.Collection.extend({
    model:RelatedListHeaderModel,
    initialize:function(){
        
    },
    fetch:function(e){
        var that = this;
        Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.CreateInteractionForm.getListRelatedList}',jQuery('[id$=objectID]').val(),function(e){
        
            var p; p = JSON.parse(e); 
            _.each(p,function(pp){
                 
                 that.add(pp);
            })      
            
            that.trigger('updated',e);
             
        },{escape:false});
    
    }
})
/**

 END Related List Header
 
*/


/**
    List of rows modal
**/
var RelatedListModel =  Backbone.Model.extend({
    defaults:{
        objId : '',
        sobj : {}, 
        newObj : false,
        modified:false,
        fields:[],
        nameObject:'',
        relationshipField:'',
        describe:{},
        modifiedField:[]
    },
    
    initialize:function(){
        this.set('modifiedField',new Array());
    },
    delete:function(){
        
        var self = this;
        var objId = this.get('objId');
        Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.RemoteActions.deleteRecord}',objId,function(e){
            
            if(e == true){
                
                self.trigger('RelatedListModel:delete',self.cid);
                self.trigger('model:deleted');
                delete self;
            }
            waitOff();
             
         
        },{escape:false});
        
    },
    removeIt:function(){
        
        this.trigger('model:removed')
        this.trigger('RelatedListModel:removed',this.cid);
        delete this;
         
        
    },
    save:function(){
        var self = this;
        
        //vars to be sent       
        var listOfFields = new Array();
        var listOfValues = new Array();
        var objectName = this.get('nameObject');
        var objId = this.get('objId');
        
        var sobj = _.omit(this.get('sobj'),'attributes');
         
        _.each(this.get('modifiedField') ,function(key){
            console.info(key);
            listOfFields.push(key);
            listOfValues.push(sobj[key]);
        })
        if(this.get('newObj')){
            //add the relation ship with the interaction.
            listOfFields.push(this.get('relationshipField'));
            listOfValues.push(jQuery('[id$=objectID]').val());
        } 
        
         Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.RemoteActions.fillObject}',listOfFields,listOfValues,objectName,objId,function(e,r){
         
            self.trigger('model:save',e,r);
            if(r.status){
                self.set('newObj',false)
                self.set('modified',false);
                self.set('objId',e);
                self.set('modifiedField',new Array());
                self.trigger('model:updated');
            }
            
        },{escape:false});
    }
})

var RelatedItemView = Backbone.Marionette.ItemView.extend({
    template: '#RowRelatedTemplate',
    model:RelatedListModel,
    
    ui:{
        textareas : 'textarea',
        selects : 'select',
        inputs : 'input',
        deleteButton : '.delSobject',
        removeButton : '.removeMod',
        errorMsg : '.errorMsg',
    
    },
    initialize:function(){
        
        var self = this;

        this.buildArrayOFData();
        
        this.on('render',this.onRender);
 
        
        this.listenTo(this.model,'model:removed',function(){
            self.remove();
        })
        this.listenTo(this.model,'model:deleted',function(){
            self.remove();
            MyApp.RelatedListNew.reloadIt(); 
        })
        this.listenTo(this.model,'model:save',function(e,r){
            self.proccesRemotingResult(e,r)
        })
        this.listenTo(this.model,'model:updated',function(){
            
            self.render();
            waitOff();
            MyApp.RelatedListNew.reloadIt(); 
        })
        
    },
    buildArrayOFData : function(){
        var self = this;
        _.each(this.model.get("fields"),function(e){ 
            e.value = self.model.get("sobj")[e.apiname];
        })
    }
    ,render:function(){
        this.buildArrayOFData();
        var r = resolveForm(this.model.get('fields'),this.model.get('describe'));
        this.$el.html(_.template(jQuery(this.template).html())(this.model.toJSON()))
        jQuery('section',this.$el).html(r);
        this.trigger('render')
        return this;
    
    },
    onRender:function(){
        bindDependencies(this.$el,this.model.get('fields'),this.model.get('describe'));
        initOpenqLookUp();
        var self = this;
        jQuery(this.ui.textareas,this.$el).each(function(){
            var updatable = jQuery(this).attr('data-fielupdatable');
            if(!self.model.get('newObj') && !updatable){
                jQuery(this).prop('disabled','disabled');
            }
        })
        jQuery(this.ui.selects,this.$el).each(function(){
            var updatable = jQuery(this).attr('data-fielupdatable');
            if(!self.model.get('newObj') && !updatable){
                jQuery(this).prop('disabled','disabled');
            }
        })
        jQuery(this.ui.inputs,this.$el).each(function(){
            var updatable = jQuery(this).attr('data-fielupdatable');
            if(!self.model.get('newObj') && !updatable && !jQuery(this).hasClass('ignoreToSave')){
                jQuery(this).prop('disabled','disabled');
            }
        })
    },
    events:{
    
        'change @ui.textareas':'fillModel',
        'change @ui.selects':'fillModel',
        'change @ui.inputs':'fillModel',
        'click @ui.deleteButton':'delete',
        'click @ui.removeButton' : 'removeIt',
     }, 
     fillModel:function(e){
            var tag = e.currentTarget;          
            var value;
            
            var $obj = jQuery(tag);
            
            if($obj.attr('type') === 'checkbox'){
            
                value = $obj.prop('checked');
            
            }else{
            
                value = $obj.val();
            }
                        
            var fieldApiName = jQuery(tag).attr('data-fieldapi');
         
            this.model.get('sobj')[fieldApiName] = value;
            if(!_.contains(this.model.get('modifiedField'),fieldApiName)){
                this.model.get('modifiedField').push(fieldApiName);
            }
            
            
            if(!this.model.get('newObj')){
            
                this.model.set('modified',true);
            }   
     },
     removeIt:function(){
        
        this.model.removeIt();
        
     },
     delete:function(){
        
        if(confirm('Are you sure you want to delete this record?')){
            this.model.delete();
        
        }
     },
     proccesRemotingResult:function(result,event){
        var self = this;
        if (event.status) {
            var message = 'Record saved';
            jQuery(self.ui.errorMsg,self.$el).fadeIn();
            jQuery(self.ui.errorMsg,self.$el).html(message);
            jQuery(self.ui.errorMsg,self.$el).fadeOut(20000)
        }else if (event.type === 'exception') {
                 
            var msgArray = event.message.split('###');
             
            var errorCode = msgArray[0];
            var idOfField = msgArray[1];
            var message = msgArray[2];
            
            switch(errorCode){
                case '16': 
                  break;
                case '17':
                    var fieldName = msgArray[3]; 
                    message = fieldName+' '+message+' ';
                    
                  break;
                  case '18':
                    if(idOfField==''){
                        message = 'This Field is required: '+message+' ';
                    }else{
                        message = 'These Fields are required: '+message+' ';            
                    }
                  break;
                        case '22':
                        
                          message = 'Validation failed.  '+message+' ';        
                         
                        break;
                 default:
                    message='An error has occurred. Please contact your administrator for assistance. Error code: '+errorCode;
                  break;       
            }
            jQuery(self.ui.errorMsg,self.$el).fadeIn();
            jQuery(self.ui.errorMsg,self.$el).html(message);
            jQuery(self.ui.inputs).change(function(){ jQuery(self.ui.errorMsg,self.$el).fadeOut(700);});
            jQuery(self.ui.selects).change(function(){ jQuery(self.ui.errorMsg,self.$el).fadeOut(700);});
            jQuery(self.ui.inputs).click(function(){ jQuery(self.ui.errorMsg,self.$el).fadeOut(700);});
            jQuery(self.ui.selects).click(function(){ jQuery(self.ui.errorMsg,self.$el).fadeOut(700);});            
            jQuery(self.ui.textareas).change(function(){ jQuery(self.ui.errorMsg,self.$el).fadeOut(700);});
            jQuery(self.ui.textareas).click(function(){ jQuery(self.ui.errorMsg,self.$el).fadeOut(700);}); 
            
        }
    } 
});
var RelatedListModelCollection = Backbone.Collection.extend({
    model:RelatedListModel,
    fields:[],
    nameObject:'',
    relationshipField:'',
    initialize:function(models,opt){ 
        
        this.fields = opt.fields;
        this.nameObject = opt.nameObject;
        this.relationshipField = opt.relationshipField;
        var self = this;
        self.describe =  sforce.connection.describeSObject(this.nameObject);
        _.each(models,function(m){
            
            var obj = _.extend(m,{fields:self.fields,nameObject:self.nameObject,relationshipField:self.relationshipField,describe:self.describe});
            
            var rlm  = new RelatedListModel(obj);
             
            self.unshift(rlm);
            
        });     
        
        this.on('RelatedListModel:removed',function(model){
            self.remove(model); 
            this.trigger('collection:change');  
        });
        this.on('RelatedListModel:delete',function(model){
            self.remove(model);
            this.trigger('collection:change');  
        });
 
    },
    addRow:function(){  
 
        var newRecord = new RelatedListModel({newObj:true,fields:this.fields,nameObject:this.nameObject,relationshipField:this.relationshipField,sobj:{},describe:this.describe});
        
        newRecord.set('id',newRecord.get('cId'));
        this.unshift(newRecord);
        this.trigger('collection:change');       
    }
    
    
});

var EmptyView =  Backbone.Marionette.ItemView.extend({
    template:_.template('<div class="col-xs-12 col-sm-12 col-ms-12 col-lg-12"  style="margin-top:10px;"><%=message%></div>'),
    initialize: function(options){
        this.model.set('message',options.message);
      }

});
var RelatedListView = Backbone.Marionette.CompositeView.extend({
        className:'',
        template: '#listRelatedListTemplate',
        childView:RelatedItemView,
        childViewContainer : '.listWrapper',
        model:RelatedListsModel, 
        /*
        emptyView: EmptyView,
        emptyViewOptions: {
            message: "No records to display"
        },*/
        ui:{
            back : '.goBack',
            save : '.saveRelatedList',
            addRow : '.newRelatedList'
        },
         
        events:{
            'click @ui.back':'closeModal',
            'click @ui.save':'save',
            'click @ui.addRow':'addRow'
            
        },
        onRender:function(){
        
            this.renderControl();
        },
        renderControl: function(){
         
            if(this.collection != undefined && this.collection.length >0){
    
                jQuery(this.ui.save).show();
            }else{
    
                jQuery(this.ui.save).hide();
            }
            
            initOpenqLookUp();
        }
        ,initialize:function(){ 
    
            var self = this;
            this.listenTo(this.model,'RelatedListsModel:updated',function(){
                
                self.collection = this.model.get('collection'); 
                self.render(); 
                jQuery(this.ui.addRow).show();
                
            })
            
            
                
        },
        addRow:function(){
            this.model.addRow();
        }       
        ,closeModal:function(){
        
            var newRecords =_.find(this.collection.models,function(e){
                return e.get('newObj')==true || e.get('modified') == true
            });
             
            if(_.size(newRecords)>0){
                if(!confirm('Unsaved changes will be lost. Proceed anyway?')){
                    return null;
                }
            }
            MyApp.relatedListSection.$el.show();
             MyApp.relatedListInformation.$el.hide();
             MyApp.RelatedListNew.reloadIt();
        },
        save:function(){
            
            _.find(this.collection.models,function(e){
                if(e.get('newObj')==true || e.get('modified') == true){
                
                    e.save()
                }
            })  
        }
   });
       

var RelatedListCollectionView = Backbone.Marionette.CollectionView.extend({
    childView:RelatedList,
    initialize:function(collection){
        this.collection = collection;
        var that =this;
        collection.on('updated',function(e){
             
                that.trigger('updated');
              
        }); 
        that.collection.fetch(true);
    },
    reloadIt:function(){
        this.collection.reset();
        this.collection.fetch(false);
    }
});


var sfdcSessionId = '{!GETSESSIONID()}';
sforce.connection.sessionId = sfdcSessionId;

 
function navigateToSobject(sobjId){
    
    if ( (typeof sforce != 'undefined' && typeof sforce.one !='undefined') && (sforce != null && sforce.one!=null) ) {
        
        sforce.one.navigateToSObject(sobjId,null);
    }

}
 
 
function resolveForm(fields,desc){

    jQuery('body').append('<div class="formCont"></div>');
 
    var returnEl = document.createElement('div');
 
    for(var i = 0 ; i < fields.length ; i++){
    
       var field = fields[i];
    
       var displayType = field.dtype.toLowerCase();
       
       var toFillTemplate = {}
       var apiname = field.apiname;
       var label = field.label;
       var required = field.required;
       
       var elemWraper = document.createElement('div');
       var e = resolveField(apiname,displayType,label,required,desc);
       
       jQuery(e).val(field.value);
               
       jQuery(elemWraper).append(e);
       var temp = _.template(jQuery('#formLookUp').html());
       toFillTemplate.label = label;
       toFillTemplate.required = required;
       toFillTemplate.element = jQuery(elemWraper).html();
    
       jQuery(returnEl).append(temp(toFillTemplate));
               
    }
 
    return jQuery(returnEl);
    
}
function bindDependencies(e,fields,desc){
    
    for(var i = 0 ; i < fields.length ; i++){
        var field = fields[i]
        var displayType = field.dtype.toLowerCase();
        var apiname = field.apiname;
        var el = jQuery('#'+apiname,e)[0];
        
        jQuery(el).val(field.value);
        if ( displayType == 'picklist' ){
        
            for(var j = 0 ; j < fields.length ; j++){
                var displayType2 = fields[j].dtype.toLowerCase();
                var apiname2 = fields[j].apiname;
                 
                if ( i != j && (displayType2 == 'picklist' || displayType2 == 'multipicklist')){
                   
                   var fieldDescribe = _.findWhere(desc.fields,{name:apiname2})
                   if(fieldDescribe.controllerName == apiname){
                   
                        
                      
                        var dependencies = null;
                        try{
                            dependencies = getDependentOptions(desc,apiname,apiname2);
                        }catch(ex){
                            //the catch is because if the primary picklist doesn't have dependent fields the function throw an exeption
                        }
                        if(dependencies!=null){
                      
                            jQuery.data(el,apiname2,dependencies);
                       
                            //we call this function after render the elements so we must process the dependencies to assign 
                            var d = jQuery.data(el);
                            for( att in d){
                         
                                assignOptFromArray(jQuery('#'+att,e)[0],d[att][jQuery(el).val()]);
                                
                            }
                         }
                        //bind event to controll dependencies
                        jQuery(el).change(function (){
                            var parent  = jQuery(this).closest('section');
                            var d = jQuery.data(this);
                            for( att in d){
                                assignOptFromArray(jQuery('#'+att,parent)[0],d[att][jQuery(this).val()]);
                                jQuery('#'+att,parent).trigger('change');
                            }
                        })
                    }
                }
           }
        }
        if ( displayType == 'reference' ){ 
                jQuery(el).attr('lastselected',null);
                jQuery(el).attr('lastselectedid',field.value)
        }
    }
}
function assignOptFromArray(tag,values){
    jQuery(tag).empty();
    if(tag.tagName == 'SELECT'){

        if(values != undefined && values.length>0){
        
            jQuery(tag).removeAttr('disabled');
            values.unshift({value:null,label:'--None--',defaultValue:false});
            _.each(values,function(e){
                
                var opt = document.createElement('option');
                opt.value = e.value;
                opt.innerHTML = e.label;
        
                jQuery(tag).append(opt);      
        
                if(jQuery(tag).val()=='' || e.defaultValue){
                    jQuery(tag).val(e.value);
                }
                
             })
        }else{
            jQuery(tag).prop('disabled', 'disabled');
        }
     } 
}
function resolveField(apiName,displayType,label,required,desc){
 
    var element  = resolveFieldElement(apiName,displayType,desc);
    var tag = document.createElement(element.tagName);
    tag.id = apiName;
    for( e in element.attributes){
       
       tag.setAttribute(e,element.attributes[e]);
    }
    
    assignOptFromArray(tag,element.values);
    
  return tag;
}

function resolveFieldElement(apiName,displayType,desc){

 var element = {tagName: 'input'};
 var attributes = {}; 
 attributes['data-fieldapi'] = apiName;
 var values = {}; 
 var fieldDescribe = _.findWhere(desc.fields,{name:apiName});
 if(fieldDescribe.calculated == true && fieldDescribe.createable !=true){
    attributes.disabled = true;
 }else if( fieldDescribe.createable ==true){
     attributes['data-fielupdatable'] = fieldDescribe.updateable
 }
 
 attributes['data-fielupdatable'] = fieldDescribe.updateable;

 switch(displayType){
    case 'date' :
    case 'datetime' :
       attributes.type = 'date';  
    break;
    case 'time' :
       attributes.type = 'time';  
    break;
    case 'phone' :
       attributes.type = 'tel';  
       attributes.maxlength = fieldDescribe.length;
    break;
    case 'double':
    case 'integer':
    case 'percent' :
       attributes.maxlength = fieldDescribe.precision;
       attributes.type = 'number';
       if(displayType == 'integer'){
          attributes.validation = '\d';
       }
       if(displayType == 'percent'){
          attributes.max = 100;
          attributes.min = 0;
            attributes.maxlength = 3
       }
    break;
    case 'boolean':
       attributes.type = 'checkbox';
    break;
    case 'reference':
       
        attributes.lastSelectedId = '';
        attributes.lastSelected = null;
        attributes.objectName= fieldDescribe.referenceTo;
        attributes.objectLabel  = fieldDescribe.label;
       element.tagName = "openqLookUp"
    break;
    case 'textarea':
       attributes.maxlength = fieldDescribe.length
       element.tagName = 'textarea'
    break;
    case 'picklist':
    case  'multipicklist':
    case 'combobox':
        if(displayType == 'multipicklist'){
            attributes.multiple='multiple';
        }
       element.tagName = 'select'; 
       var fieldDescribe = _.findWhere(desc.fields,{name:apiName})
       
       if(fieldDescribe.picklistValues.length>1){
            values = _.where(fieldDescribe.picklistValues,{active:'true'})
        }else{
            values = new Array();
            if(fieldDescribe.picklistValues.length != 0 && fieldDescribe.picklistValues.active)
                values.push(fieldDescribe.picklistValues)
        }
        
    break;
    case 'url' :
       attributes.maxlength = fieldDescribe.length
       attributes.type = 'text';
       attributes.validation = '^(ftp:\/\/www\.|http:\/\/www\.|https:\/\/www\.|http:\/\/|https:\/\/)[a-z0-9]+([\-\.]{1}[a-z0-9]+)*\.[a-z]{2,5}(:[0-9]{1,5})?(\/.*)?$';
    break;
    case 'email': 
       attributes.type = 'text';
       attributes.validation = '^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$';
    break;
    case 'currency' :
    case 'string' :
    case 'id':
    default:
      if(displayType=='string'){
         attributes.maxlength = fieldDescribe.length;
      }
      
      attributes.type = 'text';

    break;
 }  
 element.attributes = attributes;
 element.values = values;
 return element;
}
 function getDependentOptions (objDesc, ctrlFieldName, depFieldName) {
    // Isolate the Describe info for the relevant fields
    //var objDesc = sforce.connection.describeSObject(objName);
    var ctrlFieldDesc, depFieldDesc;
    var found = 0;
    for (var i=0; i<objDesc.fields.length; i++) {
        var f = objDesc.fields[i];
        if (f.name == ctrlFieldName) {
            
            ctrlFieldDesc = f;
            found++;
        } else if (f.name == depFieldName) {
            
            depFieldDesc = f;
            found++;
        }
    if (found==2) break;
    }
 
    // Set up return object
    var dependentOptions = {};
    var ctrlValues = ctrlFieldDesc.picklistValues;
    for (var i=0; i<ctrlValues.length; i++) {
        dependentOptions[ctrlValues[i].label] = [];
    }
 
    var base64 = new sforce.Base64Binary("");
    function testBit (validFor, pos) {
            var byteToCheck = Math.floor(pos/8);
        var bit = 7 - (pos % 8);
        return ((Math.pow(2, bit) & validFor.charCodeAt(byteToCheck)) >> bit) == 1;
    }
// For each dependent value, check whether it is valid for each controlling value
    var depValues = depFieldDesc.picklistValues;
    if(depValues.length>1){
            for (var i=0; i<depValues.length; i++) {
                var thisOption = depValues[i];
                var validForDec = base64.decode(thisOption.validFor);
                for (var ctrlValue=0; ctrlValue<ctrlValues.length; ctrlValue++) {
                    if (testBit(validForDec, ctrlValue)) {
                        dependentOptions[ctrlValues[ctrlValue].label].push(thisOption);
                    }       
                }
            }
     }else{
        var thisOption = depValues;
        var validForDec = base64.decode(thisOption.validFor);
        for (var ctrlValue=0; ctrlValue<ctrlValues.length; ctrlValue++) {
            if (testBit(validForDec, ctrlValue)) {
                dependentOptions[ctrlValues[ctrlValue].label].push(thisOption);
            }       
        }
    }
    
    return dependentOptions;
}



jQuery(document).ready(function(){
    if({!!isNULL($CurrentPage.parameters.id)}){
        initRelatedList();
    }
})
</script>

</body>  
</apex:page>