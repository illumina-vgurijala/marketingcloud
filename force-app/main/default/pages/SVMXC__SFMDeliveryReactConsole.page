<apex:page title="Service Delivery" standardStylesheets="false" controller="SVMXC.SFMDeliveryController" sidebar="true">
<apex:includeScript value="/support/console/44.0/integration.js"/>
<script>

  var communityId = "{!$Site.SiteId}";
  var ASSET_ROOT = "{!URLFOR($Asset.SLDS, '/')}";
  var PUBLIC_URL = "{!URLFOR($Resource.SFMDeliveryReact, 'sfmdelivery-react')}";

    console.log('go - web page init called');
    var __SVMX_URL_PARAMS__ = null;
    function getURLParams (name) {
      if (__SVMX_URL_PARAMS__ == null) {
        __SVMX_URL_PARAMS__ = {};
        const Url = document.URL;
        const paramValues = Url.slice(Url.indexOf('?') + 1).split('&');

        for (let i = 0; i < paramValues.length; i++) {
          var val = paramValues[i].split('=');
          __SVMX_URL_PARAMS__[val[0]] = val[1];
        }
      }
      var ret = __SVMX_URL_PARAMS__[name];
      if (ret != null) {
        ret = decodeURIComponent(ret);

        // decodeURIComponent does not decode +!
        ret = ret.split('+').join(' ');
      }
      return ret;
    }

    function ToJSONString(data) {
      if (data) {
        return JSON.stringify(data);
      }
    }

    function ToJSONObject (data) {
      var ret = data;

      if (typeof data === 'string' && data.match(/^\s*\"|\'|\{|\[/)) {
        try {
          ret = JSON.parse(data);
        } catch (e) {
        }
      }

      return ret;
    };

    function processResourceURL(url){
        var ret = url, index;
        if((index = url.indexOf("?")) != -1){
            ret = url.substring(0, index);
        }
        return ret;
    }

    function navigateTo(urlStr, newRecord) {
        //Defect Fix : 045122 : Below code added for salesforce Lightning console and added if condition for lightning console which is Theme4u
        var themTypeValue = '{!$User.UITheme}';
        if(urlStr && sforce.console.isInConsole() && themTypeValue == 'Theme4u')
        {
            if (newRecord){
                sforce.console.getEnclosingTabId(function(result) {
                    sforce.console.getEnclosingPrimaryTabId(function(primaryTabIdRes){
                        if(result.id!=undefined && primaryTabIdRes.id!=undefined && result.id == primaryTabIdRes.id){//Added by Nidhi as fix for defect #46694
                            sforce.console.openPrimaryTab(result.Id, urlStr, true, tabLabel, function() {
                                sforce.console.closeTab(result.id);
                            });

                        }else{

                            //Defect fix - 046781 : Changed below logic
                            sforce.console.closeTab(result.id);
                            sforce.console.refreshPrimaryTabById(primaryTabIdRes.id, true);
                            sforce.console.openPrimaryTab(null, urlStr, true, tabLabel, function() {
                                //sforce.console.closeTab(result.id);
                            });
                        }
                    });
                });
            }else
            {
              sforce.console.getEnclosingTabId(function(result) {
                sforce.console.getEnclosingPrimaryTabId(function (primaryTabIdRes){
                    if(result.id!=undefined && primaryTabIdRes.id!=undefined && result.id == primaryTabIdRes.id){//Added by Nidhi as fix for defect #46694
                        //sforce.console.refreshPrimaryTabById(primaryTabIdRes.id, true);
                        sforce.console.openPrimaryTab(result.Id, urlStr, true, tabLabel, function() {
                            sforce.console.closeTab(result.id);
                        });
                    }else{//Added by Nidhi Ends here
                        sforce.console.closeTab(result.id);
                        sforce.console.refreshPrimaryTabById(primaryTabIdRes.id, true);
                    }
                });
              });

            }

        }else if(urlStr && sforce.console.isInConsole()){
            var primaryTabId = getURLParams("priTabId");
            var subtabId = getURLParams("subtabId");
            var tabLabel = '';
            if (newRecord){
                //Jaysukh:Defect Fixed 044713 : Refreshing record on creating of new record
                sforce.console.getEnclosingTabId(function(result)
                {
                    sforce.console.refreshPrimaryTabById(primaryTabId, true, function()
                    {
                      sforce.console.openPrimaryTab(result.Id, urlStr, true, tabLabel, function(){
                                sforce.console.closeTab(result.id);
                       });
                       <!-- sforce.console.openSubtab(primaryTabId, urlStr, true, tabLabel, result.id); -->

                    });
                });
            }
            else
            {
                //Defect Fixed 43999 : If condition true when sfm lauch from custom button and else condition for sfm lauched from wizard button
                if(typeof primaryTabId === 'undefined' &&  typeof subtabId === 'undefined')
                {
                    sforce.console.getEnclosingTabId(function(result) {
                        //Jaysukh : below code changed for BAC-3444
                        sforce.console.refreshSubtabById(result.id, true, function() {
                            // 1-  First get the Primary tab ID and then refresh it.
                            // 2- Later close the subtab
                            sforce.console.getEnclosingPrimaryTabId(function (primaryTabIdRes) {
                               sforce.console.refreshPrimaryTabById(primaryTabIdRes.id, true, function() {
                                    sforce.console.closeTab(result.id);
                                });
                            });
                        });
                    });
                }
                else
                {
                    sforce.console.getEnclosingTabId(function(result) {
                        sforce.console.refreshSubtabById(subtabId, true, function() {
                            sforce.console.refreshPrimaryTabById(primaryTabId, true, function() {
                                sforce.console.closeTab(result.id);
                            });
                        });
                    });
                }
            }
        } else {
            console.log('before redirect');
            window.parent.location.href = '' + urlStr;
            console.log('after redirect');
            //window.top.close();
        }
    }

</script>

<script>
    var svmx_org_namespace = 'SVMXC';

    var cacheDataContext = function () {
        this.dataCache = null;
        this.dataCallBack = null;
        this.dataEvent = null;
        this.dataContext = null;
        this.dataInitiated = true;
    };

    if(window['Visualforce'] && Visualforce.remoting){
        Visualforce.remoting.timeout = 120000;
    }

    var SVMXJsr = {

        dataContext: {},
        configuration:{},

        JsrGetConfigInfo : function(request, callback, context){
            var requestStr = ToJSONString(request), me = this;
            console.log('JsrGetConfigInfo - start');
            var cache = me.dataContext['config'];
            if(cache && cache.dataInitiated){
                if(cache.dataCache) {
                    me.processResult(cache.dataCache, cache.dataEvent, callback, context);
                    delete me.dataContext['config'];
                } else {
                    cache.dataCallBack = callback;
                    cache.dataContext = context;
                }
            } else {
                 Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.SFMDeliveryController.JsrGetConfigInfo}', requestStr,
                    function(result, event){
                        console.log('JsrGetConfigInfo - end');
                        me.processResult(result, event, callback, context);
                    }, {buffer:false,escape: false}
                );
            }
        },

        JsrGetIsQualify: function(request, callback, context){
            var requestStr = ToJSONString(request), me = this;
            console.log('JsrGetIsQualify - start');
            var cache = me.dataContext['qualifier'];
            if(cache && cache.dataInitiated){
                if(cache.dataCache) {
                    me.processResult(cache.dataCache, cache.dataEvent, callback, context);
                    delete me.dataContext['qualifier'];
                } else {
                    cache.dataCallBack = callback;
                    cache.dataContext = context;
                }
            } else {
                Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.SFMDeliveryController.JsrGetIsQualify}', requestStr,
                    function(result, event){
                        console.log('JsrGetIsQualify - end');
                        me.processResult(result, event, callback, context);
                    }, {buffer:false,escape: false}
                );
            }
        },

        JsrGetJwtToken : function(request, callback, context){
            var requestStr = ToJSONString(request), me = this;

            Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.SFMDeliveryController.JsrGetJwtToken}', requestStr,
                function(result, event){
                    console.log('JsrGetJwtToken - end');
                    me.processResult(result, event, callback, context);
                }, {escape: false}
            );
        },

        JsrGetPageLayout : function(request2, callback, context){
            var requestStr = ToJSONString(request2), me = this;
            console.log("JSR - JsrGetPageLayout start");
           
            Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.SFMDeliveryController.JsrGetPageLayout}', requestStr,
                function(result, event){
                    console.log('JsrGetPageLayout - end');
                    me.processResult(result, event, callback, context);
                }, {escape: false}
            );
        },

        JsrGetBubbleData : function(request, callback, context){
            var requestStr = ToJSONString(request), me = this;
            console.log('JsrGetBubbleData - start');
            Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.SFMDeliveryController.JsrGetBubbleData}', requestStr,
                function(result, event){
                    console.log('JsrGetBubbleData - end');
                    me.processResult(result, event, callback, context);
                }, {escape: false}
            );
        },

        JsrGetLookupConfig : function(request, callback, context){
            var requestStr = ToJSONString(request), me = this;
            Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.SFMDeliveryController.JsrGetLookupConfig}', requestStr,
                function(result, event){ me.processResult(result, event, callback, context); }, {escape: false}
            );
        },

        JsrAddRecords : function(request, callback, context){
            var requestStr = ToJSONString(request), me = this;
            Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.SFMDeliveryController.JsrAddRecords}', requestStr,
                function(result, event){ me.processResult(result, event, callback, context); }, {escape: false}
            );
        },

        JsrSaveTarget : function(request, callback, context){
            var requestStr = ToJSONString(request), me = this;
            if(!isCORSEnabled()) {
              Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.SFMDeliveryController.JsrSaveTarget}', requestStr,
                  function(result, event){ me.processResult(result, event, callback, context); }, {escape: false}
              );
            } else {
              me.callSaveByREST(request,callback,context);
            }
        },

        JsrGetNextStepInfo : function(request, callback, context){
            var requestStr = ToJSONString(request), me = this;
            Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.SFMDeliveryController.JsrGetNextStepInfo}', requestStr,
                function(result, event){ me.processResult(result, event, callback, context); }, {escape: false}
            );
        },

        JsrGetSnippetForEvent : function(request, callback, context){
            var requestStr = ToJSONString(request), me = this;
            Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.SFMDeliveryController.JsrGetSnippetForEvent}', requestStr,
                function(result, event){ me.processResult(result, event, callback, context); }, {escape: false}
            );
        },

        JsrGetRecordTypes : function(request, callback, context){
            var requestStr = ToJSONString(request), me = this;
            Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.SFMDeliveryController.JsrGetRecordTypes}', requestStr,
                function(result, event){ me.processResult(result, event, callback, context); }, {escape: false}
            );
        },

        JsrGetLookupData : function(request, callback, context){
            var requestStr = ToJSONString(request), me = this;
            Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.SFMDeliveryController.JsrGetLookupData}', requestStr,
                function(result, event){ me.processResult(result, event, callback, context); }, {escape: false}
            );
        },

        JsrGetLookupConfiguration : function(request, callback, context){ //Added for BAC-5211
            var requestStr = ToJSONString(request), me = this;
            Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.SFMDeliveryController.JsrGetLookupConfiguration}', requestStr,
                function(result, event){ me.processResult(result, event, callback, context); }, {escape: false}
            );
        },

        JsrGetPageData : function(request, callback, context){
            var requestStr = ToJSONString(request), me = this;
            console.log("JSR - JsrGetPageData start");
            var cache = me.dataContext['pageData'];
            if(cache && cache.dataInitiated){
                if(cache.dataCache) {
                    console.log("JSR - PageData available");
                    me.processResult(cache.dataCache, cache.dataEvent, callback, context);
                    delete me.dataContext['pageData'];
                } else {
                    console.log("JSR - PageData not available");
                    cache.dataCallBack = callback;
                    cache.dataContext = context;
                }
            } else {
                Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.SFMDeliveryController.JsrGetPageData}', requestStr,
                    function(result, event){ console.log("DateTime JsrGetPageData server response came"); me.processResult(result, event, callback, context); }, {buffer:false,escape: false}
                );
            }
        },

        JsrGetPageDataV2 : function(request, callback, context){//Added by Nidhi as part of Lazy Loading BAC-4680
            var requestStr = ToJSONString(request), me = this;
            Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.SFMDeliveryController.JsrGetPageDataV2}', requestStr,
                function(result, event){ me.processResult(result, event, callback, context); }, {escape: false}
            );
        },

        JsrRetrieveDisplayTags : function(request, callback, context){
            var requestStr = ToJSONString(request), me = this;
            console.log('JSR - JsrRetrieveDisplayTags - start');

            if(!isCORSEnabled()) {
                Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.SFMDeliveryController.JsrRetrieveDisplayTags}', requestStr,
                    function(result, event){
                       me.processResult(result, event, callback, context);
                    }, {buffer:false, escape: false}
                );
            } else {
                me.callDisplayTagsByREST(request,callback,context);
            }
        },

        JsrGetListOfChecklist : function(request, callback, context){
            var requestStr = ToJSONString(request), me = this;
            Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.SFMDeliveryController.JsrGetListOfChecklist}', requestStr,
                function(result, event){ me.processResult(result, event, callback, context); }, {escape: false}
            );
        },

        JsrResolveLookUpDisplayValue : function(request, callback, context){
            var requestStr = ToJSONString(request), me = this;
            Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.SFMDeliveryController.JsrResolveLookUpDisplayValue}', requestStr,
                function(result, event){ me.processResult(result, event, callback, context); }, {escape: false}
            );
        },

        processResult : function(result, event, callback, context){
            var me = this;
            var ret = {success : false};
            console.log('Jsr - processResult '+event.method);
            if(event.status == true && result != null){
                ret = ToJSONObject(result);
                //------Start-------Added for the story BAC-4426
                if(event.method == 'JsrGetPageData'){
                    ret.message = ret && ret.data && ret.data.response && ret.data.response.message;
                }
                else if(event.method == 'JsrGetPageLayout' || event.method == 'JsrGetBubbleData'){
                    ret.message = ret && ret.response && ret.response.message;
                    ret.success = ret && ret.response && ret.response.success;
                }else if(event.method == 'JsrGetPageDataV2'){//Added by Nidhi as part of Lazy Loading BAC-4680
                    ret.message = ret.data.response.message;
                    ret.success = ret.data.response.success;
                }
            }
            else{
                ret.success = event.status;
                ret.message = event.message;
            }
            //------End-------Added for the story BAC-4426
            callback.call(context, ret, event);
        },

        callSaveByREST : function(request,callback, context){
            var me = this;
            var apiPath = svmx_org_namespace + '/svmx/rest/SFMDeliveryServiceIntf/saveTarget/9.0/';
            callRestEndpoint('SFMDeliveryServiceIntf', 'saveTarget', apiPath, request,
                function(result,event){
                    var status = result.status=='error'?false:true;
                    var event = {'status':status, 'method':'saveTarget'};
                    me.processResult(result, event, callback, context);
                 },
                this
            );
        },

        callDisplayTagsByREST : function(request,callback, context){
            var me = this;
            var apiPath = svmx_org_namespace + '/svmx/rest/SFMDeliveryServiceIntf/retrieveDisplayTags/9.0/';
            callRestEndpoint('SFMDeliveryServiceIntf', 'retrieveDisplayTags', apiPath, request,
                function(result,event){
                    var status = result.status=='error'?false:true;
                    var event = {'status':status, 'method':'retrieveDisplayTags'};
                    me.processResult(result, event, callback, context);
                 },
                this
            );
        },

        initiatePageDataByREST : function(request){
            var me = this;
            console.log("DateTime initiatePageData start");
            var apiPath = svmx_org_namespace + '/svmx/rest/SFMDeliveryServiceIntf/getPageData/9.0/';
            callRestEndpoint('SFMDeliveryServiceIntf', 'getPageData', apiPath, request,
                function(result,event){
                    var status = result.status=='error'?false:true;
                    var event = {'status':status, 'method':'JsrGetPageData'};
                    console.log("DateTime initiatePageData server response came");
                    var cache = me.dataContext['pageData'];
                    if(cache) {
                        if(cache.dataCallBack) {
                            me.processResult(result, event,cache.dataCallBack, cache.dataContext);
                            delete me.dataContext['pageData'];
                        } else {
                            cache.dataCache = result;
                            cache.dataEvent = event;
                        }
                    }
                 },
                this
            );
        },

        initiatePageDataByJSR : function(request){
            var requestStr = ToJSONString(request), me = this;

            console.log("DateTime initiatePageData start");
            Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.SFMDeliveryController.JsrGetPageData}', requestStr,
                function(result, event){
                    console.log("DateTime initiatePageData server response came");
                    var cache = me.dataContext['pageData'];
                    if(cache) {
                        if(cache.dataCallBack) {
                            me.processResult(result, event,cache.dataCallBack, cache.dataContext);
                            delete me.dataContext['pageData'];
                        } else {
                            cache.dataCache = result;
                            cache.dataEvent = event;
                        }
                    }
                 }, {buffer:false,escape: false}
            );
        },

        initiateIsRecordQualifyByJSR : function(request,callback,context){
            var requestStr = ToJSONString(request), me = this;

            Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.SFMDeliveryController.JsrGetIsQualify}', requestStr,
                function(result, event){
                    callback.call(context,ToJSONObject(result));
                    var cache = me.dataContext['qualifier'];
                    if(cache) {
                        if(cache.dataCallBack) {
                            me.processResult(result, event,cache.dataCallBack, cache.dataContext);
                            delete me.dataContext['qualifier'];
                        } else {
                            cache.dataCache = result;
                            cache.dataEvent = event;
                        }
                    }
                 }, {buffer:false,escape: false}
            );
        },

        initiateConfigCallByJSR : function(request,callback,context){
            var requestStr = ToJSONString(request), me = this;

            Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.SFMDeliveryController.JsrGetConfigInfo}', requestStr,
                function(result, event){
                    callback.call(context,ToJSONObject(result));
                    var cache = me.dataContext['config'];
                    if(cache) {
                        if(cache.dataCallBack) {
                            me.processResult(result, event,cache.dataCallBack, cache.dataContext);
                            delete me.dataContext['config'];
                        } else {
                            cache.dataCache = result;
                            cache.dataEvent = event;
                        }
                    }
                 }, {buffer:false,escape: false}
            );
        },

        addApplicationParameter: function(key,value) {
           this.configuration[key] = value;
        },

        getApplicationParameter: function(key) {
          return this.configuration[key];
        }
    }

    function shouldInitiateParallelCalls() {
        if(getURLParams("SVMX_action") === 'CHECKLIST')  {
            return false;
        }
        return true;
    }

    SVMXJsr.dataContext['pageData'] = new cacheDataContext();;
    SVMXJsr.dataContext['qualifier'] = new cacheDataContext();
    SVMXJsr.dataContext['config'] = new cacheDataContext();

    SVMXJsr.addApplicationParameter("namespace",svmx_org_namespace);
    SVMXJsr.addApplicationParameter("SVMX_processId",getURLParams("SVMX_processId"));
    SVMXJsr.addApplicationParameter("SVMX_recordId",getURLParams("SVMX_recordId"));
    SVMXJsr.addApplicationParameter("svmx-base-url","{!$Site.Prefix}");

</script>
<html lang="en" xmlns="https://www.w3.org/2000/svg" xmlns:xlink="https://www.w3.org/1999/xlink">
<head>
  <meta charset="utf-8"/>
  <meta name="viewport" content="width=device-width,initial-scale=1,shrink-to-fit=no"/>
  <meta name="theme-color" content="#000000"/>
  <link rel="manifest" href="{!URLFOR($Resource.SFMDeliveryReact, 'sfmdelivery-react')}/manifest.json"/>
  <link rel="shortcut icon" href="{!URLFOR($Resource.SFMDeliveryReact, 'sfmdelivery-react')}/favicon.ico"/>
  <link href="{!URLFOR($Resource.SFMDeliveryReact, 'sfmdelivery-react')}/static/css/main.css" rel="stylesheet"/>
  <title>ServiceMax Delivery</title>
  <apex:slds />
</head>
<body>
<div class="slds-scope">
  <noscript>You need to enable JavaScript to run this app.</noscript>
  <div id="root"></div>
  <div id="portal-root"></div>
</div>

 <script type="text/javascript" src="{!URLFOR($Resource.SFMDeliveryReact, 'sfmdelivery-react')}/static/js/main.js"></script>
</body>
</html>
<script>

    var applicationStarted = false;
    var sessionTokenReceived = false;
    var recordQualifyReceived = false;
    var configResponseReceived = false;
    var bInitiateParallelCalls = false;
    var bInitiatePageData = false;

    //initial values
    var svmx_sfm_delivery_process_title;
    var svmx_sfm_delivery_settings = {}; //mandatory
    var svmx_sfm_delivery_userinfo = {}; //mandatory
    var svmx_sfm_delivery_is_sfmprocess;
    var svmx_sfm_delivery_is_qualified = false;
    var svmx_sfm_delivery_error_message;
    var svmx_sfm_delivery_process_lmd;
    var svmx_sfm_delivery_attachments_enabled = false;
    var svmx_sfm_lightning_title_process_name;
    var svmx_sfm_lightning_title_source_record_value;
    var svmx_sfm_tab_style_logo_url;
    var svmx_sfm_color_code_for_icon;
    var svmx_is_launch_designer_enabled;
    var svmx_url_for_launch_designer;
    var svmx_salesforce_file_global_setting;
    var svmx_is_sanitizehtml_enabled;
    var svmx_sfm_delivery_jwt_token;
    var svmx_is_jwt_token_enabled;
    var svmx_is_usage_statistics_enable;
    var svmx_site_prefix = "{!$Site.Prefix}";

    var svmx_user_id;
    var svmx_user_language;

    var request = {
        processId:getURLParams("SVMX_processId"),
        recordId:getURLParams("SVMX_recordId"),
        qualify:true,
        dateTimeConversionRequired:true,
    };

    function callRestEndpoint(endpoint,methodname,query,data,callback,context) {
        var instanceName = getURLParams("SVMX_AppInstanceName");
        var sessionId =  SVMXJsr.getApplicationParameter('session-id');
        var data = JSON.stringify(data);
        var url= 'https://'+ instanceName +'.salesforce.com/services/apexrest/'+ query;
        var headers = {
          'Authorization': 'OAuth '+sessionId,
          'SalesforceProxy-Endpoint':url,
        };
        SVMX.ajax({
          type: 'POST',
          contentType: 'application/json',
          dataType: 'json',
          data: data,
          url:url,
          context: this,
          async: true,
          headers: headers,
  
          success:  function(data, status, jqXhr) {
            callback.call(context,data);
          },
  
          error: function(jqXhr, status, e) {
            var data = { 'e': e,'status':status};
            callback.call(context,data);
          },
        });
    }

    function callSoapEndpoint(endpoint, methodname, query, data, callback, context) {
        var soapService = window['callSoapService'];
        soapService && soapService(endpoint, methodname, query, data, callback, context);
    }

    function shouldInitiateParallelCalls() {
        if(getURLParams("SVMX_action") === 'CHECKLIST')  {
            return false;
        }
        return true;
    }

    function isCORSEnabled() {
         if(getURLParams("SVMX_CORS_Enabled") === 'false' || getURLParams("SVMX_CORS_Enabled") === undefined) {
            return false;
         }
         return true;
    }

    function initiateParallelCalls() {
        
        if(!bInitiatePageData && shouldInitiateParallelCalls() && sessionTokenReceived )  {
            bInitiatePageData = true;
            callInitiatePageData();
        }
    }

    function callGetSessionToken() {
        console.log('GetSessionToken call - start');
        SVMXJsr.addApplicationParameter("session-id", "{!GETSESSIONID()}");
        sessionTokenReceived= true;
        initiateParallelCalls();
    }

    function callGetConfigInfo() {
        console.log('JsrGetConfigInfo call - start');
      
        SVMXJsr.initiateConfigCallByJSR(request, 
            function(result) {
                console.log('JsrGetConfigInfo call - end');
                svmx_sfm_delivery_userinfo = result.UserInfo;   //first time
                svmx_sfm_delivery_process_title = result.ProcessTitle;
                svmx_sfm_delivery_settings = result.Settings;
                svmx_sfm_delivery_process_lmd = result.numLMD;
                svmx_sfm_lightning_title_process_name = result.strLightningTitleProcessName;
                svmx_sfm_lightning_title_source_record_value = result.strLightningTitleSourceRecordValue;
                svmx_sfm_tab_style_logo_url = result.strTabStyleLogoURL;
                svmx_sfm_color_code_for_icon = result.strColorCodeForIcon;
                svmx_is_launch_designer_enabled = result.isLaunchDesignerEnabled;
                svmx_url_for_launch_designer = result.urlForLaunchDesigner;
                svmx_salesforce_file_global_setting = result.salesforceFileGlobalValue;
                svmx_is_sanitizehtml_enabled = result.isSanitizehtmlEnabled;
                svmx_is_usage_statistics_enable = result.isUsageStatisticsEnable;
                svmx_list_of_object_names = result.lstObjectNames;
                configResponseReceived = true;
                initiateParallelCalls();
            },
            this
        );
    }

    function callGetIsRecordQualify() {
        console.log('JsrGetIsQualify call - start');
        
        SVMXJsr.initiateIsRecordQualifyByJSR(request, 
            function(result) {
                console.log('JsrGetIsQualify - end');
                recordQualifyReceived = true;
                svmx_sfm_delivery_is_sfmprocess = result.isSFMProcess;
                svmx_sfm_delivery_is_qualified = result.isQualified;
                svmx_sfm_delivery_error_message = result.errorMessage;
                svmx_user_id = result.userId;
                svmx_user_language = result.language;
                SVMXJsr.addApplicationParameter("svmx-app-instance-name", result.appInstanceName);
                SVMXJsr.addApplicationParameter("svmx-app-instance-url", result.appInstanceURL);
                initiateParallelCalls();
            },
            this
        );
    }

    function callJWTToken() {
        console.log('JsrGetJwtToken call - start');
        SVMXJsr.JsrGetJwtToken({},
            function(result,event) {
                console.log('JsrGetJwtToken call - end');
                sessionTokenReceived= true;
                svmx_is_jwt_token_enabled = result.isJWTTokenEnabledforClient;
                svmx_sfm_delivery_jwt_token = result.jwtTokenIdforCommunity;
                SVMXJsr.addApplicationParameter("session-id", svmx_sfm_delivery_jwt_token);
                initiateParallelCalls();
            },
            this
        );
    }

    function callInitiatePageData() {
        console.log('JsrGetPageData call - start');
        var cache = SVMXJsr.dataContext['pageData'];
        cache.dataInitiated = true;
        if(isCORSEnabled())
            SVMXJsr.initiatePageDataByREST(request);
        else
            SVMXJsr.initiatePageDataByJSR(request);
    }

    function loadApplication() {
      console.log('application started');
      applicationStarted = true;
      initiateParallelCalls();
    }

    function getSessionToken() {
        if(getURLParams("SVMX_JWTEnabled") == 'true') {
            callJWTToken();
        } else {
            callGetSessionToken(); // api session
        }
    }

    callGetIsRecordQualify(); //JSR call
    callGetConfigInfo(); // JSR call
    loadApplication();
    getSessionToken();


</script>

<script>
    var isStatisticsEnabled = '{!$CurrentPage.parameters.SVMX_IsStatisticsEnabled}';
    if(isStatisticsEnabled === 'true'){
        var consolePageHead = document.getElementsByTagName('head')[0];
        var newRelicScriptTag = document.createElement('script');
        newRelicScriptTag.setAttribute("type", "text/javascript");
        newRelicScriptTag.setAttribute("src", "{!URLFOR($Resource.com_servicemax_client_usageanalytics , 'com.servicemax.client.usageanalytics/resource/sfmdelivery-newrelic.js')}");
        consolePageHead.appendChild(newRelicScriptTag);
    }
</script>
</apex:page>