<!--
    Apttus Configuration & Pricing 
    
    CreateOrderForCustomerPO 
    @2017-2018 Apttus Inc. All rights reserved.
 -->
<apex:page lightningStylesheets="true" standardController="Apttus_Config2__CustomerPurchaseOrder__c" 
           extensions="Apttus_Config2.RemotePOController" 
           title="Purchase Order" 
           docType="html-5.0" 
           showHeader="false" 
           sidebar="false" 
           tabstyle="Apttus_Config2__CustomerPurchaseOrder__c" 
           standardStylesheets="false">

    <head>
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <!-- <base href="/" /> -->
        <title>OM</title>
        <apex:stylesheet value="{!URLFOR($Resource.Apttus_Config2__OMCustomerPO, '/vendor.css')}" />
    </head>

    <body ng-app="OM">
        <!-- Header Directive -->
        <admin-header class="admin-header navbar-fixed-top"></admin-header>
        <!-- Menu Specific Content -->
        <div class="page-container" id="page-container">
            <div ui-view="pageContent" class="full-height"></div>
        </div>

        <apex:includeScript value="{!URLFOR($Resource.Apttus_Config2__OMCustomerPO, '/vendor.js')}" />


        <script type="text/javascript">
            /**
            * Anonymous blocks for configuring the different modules.
            * These config blocks need to be defined within the page to take
            *  advantage of visualforce binding for initializing the app with
            *  constant pieces of data.
            */
            //Create System Properties constant

            var baseUrl = formatSFDCUrl("{!URLFOR($Resource.OMCustomerPO, '/app')}");
            var baseFileUrl = '';

            function IeVersion() {
                //Set defaults
                var value = {
                    IsIE: false,
                    TrueVersion: 0,
                    ActingVersion: 0,
                    CompatibilityMode: false
                };

                //Try to find the Trident version number
                var trident = navigator.userAgent.match(/Trident\/(\d+)/);
                if (trident) {
                    value.IsIE = true;
                    //Convert from the Trident version number to the IE version number
                    value.TrueVersion = parseInt(trident[1], 10) + 4;
                }

                //Try to find the MSIE number
                var msie = navigator.userAgent.match(/MSIE (\d+)/);
                if (msie) {
                    value.IsIE = true;
                    //Find the IE version number from the user agent string
                    value.ActingVersion = parseInt(msie[1]);
                } else {
                    //Must be IE 11 in "edge" mode
                    value.ActingVersion = value.TrueVersion;
                }

                //If we have both a Trident and MSIE version number, see if they're different
                if (value.IsIE && value.TrueVersion > 0 && value.ActingVersion > 0) {
                    //In compatibility mode if the trident number doesn't match up with the MSIE number
                    value.CompatibilityMode = value.TrueVersion != value.ActingVersion;
                }
                return value;
            }

            var CustomLabel = {};
                CustomLabel.Accept = "{!JSENCODE($Label.AcceptCustomerPurchaseOrder)}";
                CustomLabel.Add = "{!JSENCODE($Label.AddPurchaseOrder)}";
                CustomLabel.Cancel = "{!JSENCODE($Label.CancelPurchaseOrder)}";
                CustomLabel.CreateSalesOrder = "{!JSENCODE($Label.CreateSalesOrder)}";
                CustomLabel.CustomerPOItems = "{!JSENCODE($Label.CustomerPOItems)}";
                CustomLabel.Delete = "{!JSENCODE($Label.DeletePurchaseOrder)}";
                CustomLabel.Edit = "{!JSENCODE($Label.EditPurchaseOrder)}";
                CustomLabel.POLINEITEMSUMMARY = "{!JSENCODE($Label.POLINEITEMSUMMARY)}";
                CustomLabel.SALESORDERLINEITEMS = "{!JSENCODE($Label.SALESORDERLINEITEMS)}";
                CustomLabel.SalesOrders = "{!JSENCODE($Label.SalesOrders)}";
                CustomLabel.CreateSingleOrder = "{!JSENCODE($Label.CreateSingleOrderForCustomerPO)}";
                CustomLabel.SplitMultiOrders = "{!JSENCODE($Label.SplitMultiOrdersCustomerPO)}";
                CustomLabel.CreatePartialOrder = "{!JSENCODE($Label.CreatePartialOrderCustomerPO)}";
                CustomLabel.SearchFilters = "{!JSENCODE($Label.SearchFiltersCustomerPO)}";
                CustomLabel.SelectCriteria = "{!JSENCODE($Label.SelectCriteriaCustomerPO)}";
                CustomLabel.PODetails = "{!JSENCODE($Label.PODetails)}";
                CustomLabel.SplitCriteria = "{!JSENCODE($Label.SplitCriteriaCustomerPO)}";
                CustomLabel.ErrosWarnings = "{!JSENCODE($Label.ErrorWarningsForCustomerPO)}";
                CustomLabel.FilterBy = "{!JSENCODE($Label.FilterByCustomerPO)}";
                CustomLabel.ShowAll = "{!JSENCODE($Label.ShowAllCustomerPO)}";
                CustomLabel.CorrectProblem = "{!JSENCODE($Label.CorrectProblemOnCustomerPO)}";
                CustomLabel.POItemList = "{!JSENCODE($Label.POItemList)}";
                CustomLabel.Amend = "{!JSENCODE($Label.AmendCustomerPO)}";
                CustomLabel.UndoAmend = "{!JSENCODE($Label.UndoAmendCustomerPO)}";
                CustomLabel.UndoCancel = "{!JSENCODE($Label.UndoCancelCustomerPO)}";
                CustomLabel.SaveAndAddProduct= "{!JSENCODE($Label.SaveCustomerPO)}";
                CustomLabel.CheckForError= "{!JSENCODE($Label.CheckForErrorCustomerPO)}";
                CustomLabel.CreateSalesOrderMessage = "{!JSENCODE($Label.CreateSalesOrderMessage)}";
                CustomLabel.CustomerPOActionSuccessMessage = "{!JSENCODE($Label.CustomerPOActionSuccessMessage)}";
                CustomLabel.CustomerPOUndoActionSuccessMessage = "{!JSENCODE($Label.CustomerPOUndoActionSuccessMessage)}";
                CustomLabel.Save = "{!JSENCODE($Label.Save)}";
                CustomLabel.CheckForErrors = "{!JSENCODE($Label.CustomerPOCheckForErrors)}";
                CustomLabel.NewPurchaseOrder = "{!JSENCODE($Label.CreateNewCustomerPOButton)}";
				CustomLabel.BackToSalesforce = "{!JSENCODE($Label.BackToSalesforce)}";
                CustomLabel.NoMatchFound = "{!JSENCODE($Label.NoMatchFound)}";
            var systemConstants = {
                "baseUrl": baseUrl,
                "baseFileUrl": baseFileUrl,
                "sitePrefix": "{!$Site.Prefix}",
                "nsPrefix": "{!settingsMap['namespacePrefix']}",
                "customerPOId": "{!customerPO.Id}",
                "customLabels": CustomLabel
            };          
                        
            //Format the base url of app static resource
            function formatSFDCUrl(sfdcString) {
                var formatExp = /^(?:.*)(\{\!URLFOR|resource|servlet)(?:.*)(\}|\/|file=\w*)$/;
                var matches = (sfdcString ? sfdcString.match(formatExp) : false);
                if (matches) {
                    var matchTerm = matches[1];
                    if (matchTerm === '\{\!URLFOR') {
                        sfdcString = '.';

                    } else if (matchTerm === 'resource') {
                        //Will only match if last char is a '/' that needs to be removed
                        sfdcString = sfdcString.slice(0, -1);

                    } else if (matchTerm === 'servlet') {
                        var param = 'file=';
                        var edge = sfdcString.indexOf(param) + param.length;
                        sfdcString = sfdcString.slice(0, edge);

                    }

                }
                return sfdcString;

            }

            // Overriding the SFDC navigateToUrl for this page as we need custom action to be performed on the click of the button. ( ctrl/cmd + click - should open the link in new tab)
            navigateToUrl = function (url) {
                var event = window.event || navigateToUrl.caller.arguments[0]; // window.event will not be returning the event object in mozilla so getting it from the callee arguments
                if (event.ctrlKey || event.metaKey) {
                    window.open(url, '_blank');
                } else {
                    window.location = url;
                }
            }

            function baseConfig(RemoteService) {
                /**
                * Resolve VF remote names and configure their behavior.
                * Each key in this object is used to reference a VF remote aciton.
                * Each can be:
                *  - String: the resolved name of the remote action;
                */
                var remoteActions = {
                    // remote action 1: fetch customerPO and related customer PO items
                    getCustomerPOandItems: '{!$RemoteAction.RemotePOController.getCustomerPOwithItems}',
                    // remote action 2: fetch customerPO and related sales orders
                    getCustomerPOandOrders: '{!$RemoteAction.RemotePOController.getCustomerPOwithOrders}',
                    // remote action 3: create sales orders
                    createOrders: '{!$RemoteAction.RemotePOController.createSalesOrders}',
                    // remote action 4: fetch customer PO item details
                    getCustomerPOItem: '{!$RemoteAction.RemotePOController.getCustomerPOItem}',
                    // remote action 5: save customer PO item details
                    saveCustomerPOItem: '{!$RemoteAction.RemotePOController.saveCustomerPOItem}',
                    // remote action 6: validate customer PO item details
                    validateCustomerPOItem: '{!$RemoteAction.RemotePOController.validatePOItem}',
                    // remote action 7: save CustomerPurchaseOrder details
                    saveCustomerPO: '{!$RemoteAction.RemotePOController.saveCustomerPO}',
                    // remote action 8: Accept CustomerPurchaseOrder 
                    acceptCustomerPO: '{!$RemoteAction.RemotePOController.acceptCustomerPO}',
                    // remote action 9: Amend CustomerPurchaseOrder 
                    amendCustomerPO: '{!$RemoteAction.RemotePOController.amendCustomerPO}',
                    // remote action 10: Validate CustomerPurchaseOrder using wrapperAPI 
                    validateCustomerPO: '{!$RemoteAction.RemotePOController.validateCustomerPurchaseOrder}',
                    // remote action 11: undoAmend CustomerPurchaseOrder
                    undoAmendCustomerPO: '{!$RemoteAction.RemotePOController.undoAmendCustomerPO}',
                    // remote action 12: undocancel CustomerPurchaseOrder
                    undoCancelCustomerPO: '{!$RemoteAction.RemotePOController.undoCancelCustomerPO}',
                    // remote action 13: cancel CustomerPurchaseOrder
                    cancelCustomerPO: '{!$RemoteAction.RemotePOController.cancelCustomerPO}',
                    // remote action 14: getMetadata
                    getSobjectMetadata: '{!$RemoteAction.RemotePOController.getSObjectDetails}',
                    // remote action 15: save List Of POItems
                    savePOItemList: '{!$RemoteAction.RemotePOController.saveListOfCustomerPOItems}',
                    // remote action 16: cancel CustomerPOItems
                    cancelPOItems: '{!$RemoteAction.RemotePOController.cancelCustomerPOItems}',
                    // remote action 17: getPickList value
                    getPicklistValues: '{!$RemoteAction.RemotePOController.getPicklistValues}',
                    // remote action 18: search lookup records
                    searchSObjectRecords: '{!$RemoteAction.RemotePOController.searchSObjectRecords}',
                    // remote action 19: getCustomerPOsListView values
                    getCustomerPOsListView: '{!$RemoteAction.RemotePOController.getCustomerPOsListView}',
                    // remote action 20: getPriceAgreements
                    getPriceAgreements: '{!$RemoteAction.RemotePOController.getPriceAgreements}',
                    // remote action 21: getPriceAgreementItems
                    getPriceAgreementsWithItems: '{!$RemoteAction.RemotePOController.getPriceAgreementsWithItems}',
                    // remote action 22: deleteCustomerPOItems 
                    deleteCustomerPOItems :'{!$RemoteAction.RemotePOController.deleteCustomerPOItems }',
                    // remote action 22: getCreateCustomerPOFields
                    getCreateCustomerPOFields:'{!$RemoteAction.RemotePOController.getCreateCustomerPOFields}',
                    // remote action 22: getCreateCustomerPOItemFields
                    getCreateCustomerPOItemFields:'{!$RemoteAction.RemotePOController.getCreateCustomerPOItemFields}',
                    // remote action 23: searchProductRecords
                    searchProductRecords:'{!$RemoteAction.RemotePOController.searchProductRecords}'
                    
                };
                RemoteService.setRemoteActions(remoteActions);
                // Need retURL or other url for redirect. Default is to redirect to '/'.
                var redirectUrl = '{!JSENCODE($CurrentPage.parameters.retURL)}',
                    regexp = /(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?/,
                    isUrl = regexp.test(redirectUrl);
                if (isUrl) {
                    RemoteService.setRedirectLocation(redirectUrl);
                }
                // Set flag true to overrides skipLoader flags of RemoteActions and show loader all remoteServiceCalls.     
                RemoteService.setTrackAllRemoteCalls(false);
            }
            <apex:includeScript value="{!URLFOR($Resource.Apttus_Config2__OMCustomerPO, '/apt_base.js')}"/>
            var OMApp = angular.module('OMApp', ['OM.apt_base']);

            baseConfig.$inject = ['remoteServiceProvider'];

            OMApp.constant('baseUrl', baseUrl)
                .constant('systemConstants', systemConstants)
                // .value('customerPOId','{!customerPO.Id}')
                .config(baseConfig);

            <apex:includeScript value="{!URLFOR($Resource.Apttus_Config2__OMCustomerPO, '/app.js')}"/>

        </script>
    </body>

</apex:page>