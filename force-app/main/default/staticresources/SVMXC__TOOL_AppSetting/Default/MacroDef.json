{   "macroDefinition":[      {         "SVMXC_Type_c":"Math",         "SVMXC_Macro_Id_c":"Math_MULTIPLY_C",         "SVMXC_Macro_Name_c":"MULTIPLY",         "SVMXC_Description_c":"Multiplies value1 by value2. The values can be numbers or field identifiers of numeric fields (number, currency, percent).",         "SVMXC_Syntax_c":"$F.MULTIPLY(value1, value2)",         "SVMXC_Example_c":"$F.MULTIPLY($D.Labor.SVMXC__Actual_Quantity2__c, $D. Labor.SVMXC__Actual_Price2__c)",         "SVMXC_SM_Entity_Type_c":"FORMULA",         "SVMXC_IsStandard_c":"True",         "SVMXC_IsActive_c":"True"      },      {         "SVMXC_Type_c":"Date",         "SVMXC_Macro_Id_c":"Date_DATE_C",         "SVMXC_Macro_Name_c":"DATE",         "SVMXC_Description_c":"Creates a date from year, month and day, where all are numeric values \/ fields, with year being specified as a 4-digit number. When the returned value is assigned to a text type field, the format of the returned value is yyyy-MM-dd.",         "SVMXC_Syntax_c":"$F.DATE(year,month,day)",         "SVMXC_Example_c":"$F.DATE($F.YEAR($D.Work_Order.CreatedDate)+1, $F.MONTH($D.Work_Order.CreatedDate), 1)",         "SVMXC_SM_Entity_Type_c":"FORMULA",         "SVMXC_IsStandard_c":"True",         "SVMXC_IsActive_c":"True"      },      {         "SVMXC_Type_c":"Widget",         "SVMXC_Macro_Id_c":"Widget_IMAGE_C",         "SVMXC_Macro_Name_c":"IMAGE",         "SVMXC_Description_c":"Inserts an image with alternate text and height\/width specifications.",         "SVMXC_Syntax_c":"$F.IMAGE(document_unique_name)",         "SVMXC_Example_c":"$F.IMAGE(<document_unique_name>)",         "SVMXC_SM_Entity_Type_c":"OPDOC",         "SVMXC_IsStandard_c":"True",         "SVMXC_IsActive_c":"True"      },      {         "SVMXC_Type_c":"Conditional",         "SVMXC_Macro_Id_c":"Conditional_AND_C",         "SVMXC_Macro_Name_c":"AND",         "SVMXC_Description_c":"Checks whether all arguments are true and returns TRUE if all arguments are true",         "SVMXC_Syntax_c":"$F.AND(logical1,logical2,..)",         "SVMXC_Example_c":"$F.IF($F.AND($F.EQUAL($D.Work_Order.SVMXC__Customer_Down__c, 'true'), $F.EQUAL($D.Work_Order.SVMXC__Order_Status__c, 'Open'), $F.EQUAL($D.Work_Order.SVMXC__Order_Type__c, 'Field Service')), $D.Work_Order.SVMXC__Billing_Type__c, 'Paid')",         "SVMXC_SM_Entity_Type_c":"FORMULA",         "SVMXC_IsStandard_c":"True",         "SVMXC_IsActive_c":"True"      },      {         "SVMXC_Type_c":"Conditional",         "SVMXC_Macro_Id_c":"Conditional_OR_C",         "SVMXC_Macro_Name_c":"OR",         "SVMXC_Description_c":"Checks whether any of the arguments are true and returns TRUE or FALSE. Returns FALSE only if all arguments are false",         "SVMXC_Syntax_c":"$F.OR(logical1,logical2,..)",         "SVMXC_Example_c":"$F.IF($F.OR($F.EQUAL($D.Work_Order.SVMXC__Customer_Down__c, 'true'), $F.EQUAL($D.Work_Order.SVMXC__Priority__c, 'High'), $F.EQUAL($D.Work_Order.SVMXC__Is_PM_Work_Order__c, 'true')), $D.Work_Order.SVMXC__Billing_Type__c, 'Paid')",         "SVMXC_SM_Entity_Type_c":"FORMULA",         "SVMXC_IsStandard_c":"True",         "SVMXC_IsActive_c":"True"      },      {         "SVMXC_Type_c":"Date",         "SVMXC_Macro_Id_c":"Date_MONTH_C",         "SVMXC_Macro_Name_c":"MONTH",         "SVMXC_Description_c":"Returns the month, a number between 1 (January) and 12 (December), for the date or datetime value argument passed. The returned number can be set as the value of a text type field also.",         "SVMXC_Syntax_c":"$F.MONTH(date or datetime)",         "SVMXC_Example_c":"$F.MONTH($D.Labor.SVMXC__Start_Date_and_Time__c)$F.Add($F.DAY($D.Labor.SVMXC__Start_Date_and_ Time__c),1)",         "SVMXC_SM_Entity_Type_c":"FORMULA",         "SVMXC_IsStandard_c":"True",         "SVMXC_IsActive_c":"True"      },      {         "SVMXC_Type_c":"Rollups",         "SVMXC_Macro_Id_c":"Rollups_MINOF_C",         "SVMXC_Macro_Name_c":"MINOF",         "SVMXC_Description_c":"Returns the minimum of all the numbers in the given list of numbers. The numbers are identified by the API name of the field and the list is identified by the lines section identifier. Numbers include currency and percent field types also.",         "SVMXC_Syntax_c":"$F.MINOF(lines_section_identifier, '<field_API_name>')",         "SVMXC_Example_c":"$F.MINOF($D.Parts, â€˜Discounted_Line_Price__câ€™)",         "SVMXC_SM_Entity_Type_c":"FORMULA",         "SVMXC_IsStandard_c":"True",         "SVMXC_IsActive_c":"True"      },      {         "SVMXC_Type_c":"Math",         "SVMXC_Macro_Id_c":"Math_SUMOF_C",         "SVMXC_Macro_Name_c":"SUMOF",         "SVMXC_Description_c":"Adds the values for a given column name from the record collection.",         "SVMXC_Syntax_c":"$F.SUMOF(<recordCollection>, '<columnname>')",         "SVMXC_Example_c":"$F.SUMOF($D.WorkOrderLines, 'SVMXC__Estimated_Quantity2__c')",         "SVMXC_SM_Entity_Type_c":"OPDOC",         "SVMXC_IsStandard_c":"True",         "SVMXC_IsActive_c":"True"      },      {         "SVMXC_Type_c":"Logical",         "SVMXC_Macro_Id_c":"Logical_EQUAL_C",         "SVMXC_Macro_Name_c":"EQUAL",         "SVMXC_Description_c":"Compares the two arguments and returns TRUE if they are the same. Returns FALSE if they are different. The field type of the arguments must be the same.",         "SVMXC_Syntax_c":"$F.EQUAL(value1,value2)",         "SVMXC_Example_c":"$F.IF($F.EQUAL($D.Work_Order.SVMXC__City__c,'San Jose'), 'Depot Repair', $D.Work_Order.SVMXC__Order_Type__c)",         "SVMXC_SM_Entity_Type_c":"FORMULA",         "SVMXC_IsStandard_c":"True",         "SVMXC_IsActive_c":"True"      },      {         "SVMXC_Type_c":"Conditional",         "SVMXC_Macro_Id_c":"Conditional_BOOL_C",         "SVMXC_Macro_Name_c":"BOOL",         "SVMXC_Description_c":"Shortcut $BOOL() to check for null values. Returns True if the value is null,  false otherwise",         "SVMXC_Syntax_c":"$F.BOOL(<value>)",         "SVMXC_Example_c":"$F.BOOL($D.WorkOrder.Id)",         "SVMXC_SM_Entity_Type_c":"OPDOC",         "SVMXC_IsStandard_c":"True",         "SVMXC_IsActive_c":"True"      },      {         "SVMXC_Type_c":"Math",         "SVMXC_Macro_Id_c":"Math_ADD_C",         "SVMXC_Macro_Name_c":"ADD",         "SVMXC_Description_c":"Adds two numeric values. The values can be numbers or field identifiers of numeric fields (number, currency, percent).",         "SVMXC_Syntax_c":"$F.ADD(value1, value2)",         "SVMXC_Example_c":"$F.ADD($D.Work_Order.Total_Parts_Price__c, $D.Work_Order.Total_Labor_Price__c)",         "SVMXC_SM_Entity_Type_c":"FORMULA;OPDOC",         "SVMXC_IsStandard_c":"True",         "SVMXC_IsActive_c":"True"      },      {         "SVMXC_Type_c":"Number",         "SVMXC_Macro_Id_c":"Number_INT_C",         "SVMXC_Macro_Name_c":"INT",         "SVMXC_Description_c":"Converts the value to an  Integer. Returns 0 for invalid values.",         "SVMXC_Syntax_c":"$F.INT(<value>)",         "SVMXC_Example_c":"$F.INT('23')",         "SVMXC_SM_Entity_Type_c":"OPDOC",         "SVMXC_IsStandard_c":"True",         "SVMXC_IsActive_c":"True"      },      {         "SVMXC_Type_c":"Conditional",         "SVMXC_Macro_Id_c":"Conditional_IF_C",         "SVMXC_Macro_Name_c":"IF",         "SVMXC_Description_c":"Checks whether a condition is true, and returns one value if TRUE and another value if FALSE.",         "SVMXC_Syntax_c":"$F.IF(logical_test, value_if_true, value_if_false)",         "SVMXC_Example_c":"$F.IF($F.EQUAL($D.Work_Order.SVMXC__Customer_Down__c,'true'), $D.Work_Order.SVMXC__Billing_Type__c, 'Paid')",         "SVMXC_SM_Entity_Type_c":"FORMULA;OPDOC",         "SVMXC_IsStandard_c":"True",         "SVMXC_IsActive_c":"True"      },      {         "SVMXC_Type_c":"String",         "SVMXC_Macro_Id_c":"String_FORMAT_C",         "SVMXC_Macro_Name_c":"FORMAT",         "SVMXC_Description_c":"Treat the first argument as a pattern and return a string using the second argument for substitution and formatting.",         "SVMXC_Syntax_c":"$F.FORMAT(<String>,[<value1>,...])",         "SVMXC_Example_c":"$F.FORMAT(\"Welcome{0}\",$F.USERNAME())",         "SVMXC_SM_Entity_Type_c":"OPDOC",         "SVMXC_IsStandard_c":"True",         "SVMXC_IsActive_c":"True"      },      {         "SVMXC_Type_c":"Date",         "SVMXC_Macro_Id_c":"Date_TODAY_C",         "SVMXC_Macro_Name_c":"TODAY",         "SVMXC_Description_c":"Returns the current date in logged user's time zone when used with a date field. Returns 12 AM on current date (logged user's time zone) when used with a datetime field. When this value is assigned to a text type field, the format of the returned value is yyyy-MM-dd.",         "SVMXC_Syntax_c":"$F.TODAY()",         "SVMXC_Example_c":"$F.TODAY()",         "SVMXC_SM_Entity_Type_c":"FORMULA;OPDOC;FILE_NAME",         "SVMXC_IsStandard_c":"True",         "SVMXC_IsActive_c":"True"      },      {         "SVMXC_Type_c":"Date",         "SVMXC_Macro_Id_c":"Date_TOMORROW_C",         "SVMXC_Macro_Name_c":"TOMORROW",         "SVMXC_Description_c":"Returns the tomorrow date as a date data type.",         "SVMXC_Syntax_c":"$F.TOMORROW()",         "SVMXC_Example_c":"$F.TOMORROW()",         "SVMXC_SM_Entity_Type_c":"OPDOC;FILE_NAME",         "SVMXC_IsStandard_c":"True",         "SVMXC_IsActive_c":"True"      },      {         "SVMXC_Type_c":"Date",         "SVMXC_Macro_Id_c":"Date_YESTERDAY_C",         "SVMXC_Macro_Name_c":"YESTERDAY",         "SVMXC_Description_c":"Returns the yesterday date as a date data type.",         "SVMXC_Syntax_c":"$F.YESTERDAY()",         "SVMXC_Example_c":"$F.YESTERDAY()",         "SVMXC_SM_Entity_Type_c":"OPDOC;FILE_NAME",         "SVMXC_IsStandard_c":"True",         "SVMXC_IsActive_c":"True"      },      {         "SVMXC_Type_c":"Date",         "SVMXC_Macro_Id_c":"Date_NOW_C",         "SVMXC_Macro_Name_c":"NOW",         "SVMXC_Description_c":"Returns a date\/time representing the current moment.",         "SVMXC_Syntax_c":"$F.NOW()",         "SVMXC_Example_c":"$F.NOW()",         "SVMXC_SM_Entity_Type_c":"FORMULA;OPDOC;FILE_NAME",         "SVMXC_IsStandard_c":"True",         "SVMXC_IsActive_c":"True"      },      {         "SVMXC_Type_c":"User",         "SVMXC_Macro_Id_c":"User_USERNAME_C",         "SVMXC_Macro_Name_c":"USERNAME",         "SVMXC_Description_c":"Returns logged in username",         "SVMXC_Syntax_c":"$F.USERNAME()",         "SVMXC_Example_c":"$F.USERNAME()",         "SVMXC_SM_Entity_Type_c":"OPDOC",         "SVMXC_IsStandard_c":"True",         "SVMXC_IsActive_c":"True"      },      {         "SVMXC_Type_c":"Widget",         "SVMXC_Macro_Id_c":"Widget_LOGO_C",         "SVMXC_Macro_Name_c":"LOGO",         "SVMXC_Description_c":"Shows the document with name Logo as a Image",         "SVMXC_Syntax_c":"$F.LOGO()",         "SVMXC_Example_c":"$F.LOGO()",         "SVMXC_SM_Entity_Type_c":"OPDOC",         "SVMXC_IsStandard_c":"True",         "SVMXC_IsActive_c":"True"      },      {         "SVMXC_Type_c":"Number",         "SVMXC_Macro_Id_c":"Number_LNUMBER_C",         "SVMXC_Macro_Name_c":"LNUMBER",         "SVMXC_Description_c":"Formats a number using the user locale settings",         "SVMXC_Syntax_c":"$F.LNUMBER(<value>)",         "SVMXC_Example_c":"$F.LNUMBER(23.45)",         "SVMXC_SM_Entity_Type_c":"OPDOC",         "SVMXC_IsStandard_c":"True",         "SVMXC_IsActive_c":"True"      },      {         "SVMXC_Type_c":"Number",         "SVMXC_Macro_Id_c":"Number_ROUND_C",         "SVMXC_Macro_Name_c":"ROUND",         "SVMXC_Description_c":"Limits the decimal places to specified",         "SVMXC_Syntax_c":"$F.ROUND(<value>,<no. of digits>)",         "SVMXC_Example_c":"$F.ROUND(23.45,1)",         "SVMXC_SM_Entity_Type_c":"OPDOC",         "SVMXC_IsStandard_c":"True",         "SVMXC_IsActive_c":"True"      },      {         "SVMXC_Type_c":"Widget",         "SVMXC_Macro_Id_c":"Widget_SIGNATURE_C",         "SVMXC_Macro_Name_c":"SIGNATURE",         "SVMXC_Description_c":"Returns the Signature of the given strings.",         "SVMXC_Syntax_c":"$F.SIGNATURE(<uniquename>, <title>, <isMandatory>)",         "SVMXC_Example_c":"$F.SIGNATURE('uniquename', 'Title', true)",         "SVMXC_SM_Entity_Type_c":"OPDOC",         "SVMXC_IsStandard_c":"True",         "SVMXC_IsActive_c":"True"      },      {         "SVMXC_Type_c":"Number",         "SVMXC_Macro_Id_c":"Number_SNUMBER_C",         "SVMXC_Macro_Name_c":"SNUMBER",         "SVMXC_Description_c":"",         "SVMXC_Syntax_c":"$F.SNUMBER(<record>,<'Field Name'>)",         "SVMXC_Example_c":"$F.SNUMBER($D.Work_Order,'SVMXC__Total_Billable_Amount__c')",         "SVMXC_SM_Entity_Type_c":"OPDOC",         "SVMXC_IsStandard_c":"True",         "SVMXC_IsActive_c":"True"      },      {         "SVMXC_Type_c":"Widget",         "SVMXC_Macro_Id_c":"Widget_CHECKLIST_C",         "SVMXC_Macro_Name_c":"CHECKLIST",         "SVMXC_Description_c":"Display the checklist question and respective responses in checklist output document.",         "SVMXC_Syntax_c":"$F.CHECKLIST()",         "SVMXC_Example_c":"$F.CHECKLIST()",         "SVMXC_SM_Entity_Type_c":"OPDOC",         "SVMXC_IsStandard_c":"True",         "SVMXC_IsActive_c":"True"      },      {         "SVMXC_Type_c":"Conditional",         "SVMXC_Macro_Id_c":"Conditional_NOT_C",         "SVMXC_Macro_Name_c":"NOT",         "SVMXC_Description_c":"Changes FALSE to TRUE or TRUE to FALSE",         "SVMXC_Syntax_c":"$F.NOT(logical)",         "SVMXC_Example_c":"$F.IF($F.NOT($F.OR($F.EQUAL($D.Work_Order.SVMXC__City__c,'Los Angeles'), $F.EQUAL($D.Work_Order.SVMXC__Is_PM_Work_Order__c, 'true'))), 'Depot Repair', $D.Work_Order.SVMXC__Order_Type__c)",         "SVMXC_SM_Entity_Type_c":"FORMULA",         "SVMXC_IsStandard_c":"True",         "SVMXC_IsActive_c":"True"      },      {         "SVMXC_Type_c":"Date",         "SVMXC_Macro_Id_c":"Date_YEAR_C",         "SVMXC_Macro_Name_c":"YEAR",         "SVMXC_Description_c":"Returns the year of a date, a number between 1900 and 9999, for the date or datetime value argument passed. The returned number can be set as the value of a text type field also.",         "SVMXC_Syntax_c":"$F.YEAR(date or datetime)",         "SVMXC_Example_c":"$F.YEAR($D.Labor.SVMXC__Start_Date_and_Time__c)",         "SVMXC_SM_Entity_Type_c":"FORMULA",         "SVMXC_IsStandard_c":"True",         "SVMXC_IsActive_c":"True"      },      {         "SVMXC_Type_c":"Logical",         "SVMXC_Macro_Id_c":"Logical_GREATERTHANEQUAL_C",         "SVMXC_Macro_Name_c":"GREATERTHANEQUAL",         "SVMXC_Description_c":"Compares the two arguments and returns TRUE if value1 is greater than or equal to value2. Returns FALSE if value1 is less than value2. The field type of the arguments must be the same",         "SVMXC_Syntax_c":"$F.GREATERTHANEQUAL(value1, value2)",         "SVMXC_Example_c":"$F.IF($F.GREATERTHANEQUAL($D.Labor.Discounted_Line_Price__c, 100), 99, $D.Labor.Discounted_Line_Price__c)",         "SVMXC_SM_Entity_Type_c":"FORMULA",         "SVMXC_IsStandard_c":"True",         "SVMXC_IsActive_c":"True"      },      {         "SVMXC_Type_c":"Rollups",         "SVMXC_Macro_Id_c":"Rollups_MAXOF_C",         "SVMXC_Macro_Name_c":"MAXOF",         "SVMXC_Description_c":"Returns the maximum of all the numbers in the given list of numbers. The numbers are identified by the API name of the field and the list is identified by the lines section identifier. Numbers include currency and percent field types also.",         "SVMXC_Syntax_c":"$F.MAXOF(lines_section_identifier, '<field_API_name>')",         "SVMXC_Example_c":"$F.MAXOF($D.Parts, â€˜Discounted_Line_Price__câ€™)",         "SVMXC_SM_Entity_Type_c":"FORMULA",         "SVMXC_IsStandard_c":"True",         "SVMXC_IsActive_c":"True"      },      {         "SVMXC_Type_c":"Widget",         "SVMXC_Macro_Id_c":"Widget_ADDRESS_C",         "SVMXC_Macro_Name_c":"ADDRESS",         "SVMXC_Description_c":"Returns address",         "SVMXC_Syntax_c":"$F.ADDRESS()",         "SVMXC_Example_c":"$F.ADDRESS()",         "SVMXC_SM_Entity_Type_c":"OPDOC",         "SVMXC_IsStandard_c":"True",         "SVMXC_IsActive_c":"True"      },      {         "SVMXC_Type_c":"Logical",         "SVMXC_Macro_Id_c":"Logical_LESSTHANEQUAL_C",         "SVMXC_Macro_Name_c":"LESSTHANEQUAL",         "SVMXC_Description_c":"Compares the two arguments and returns TRUE if value1 is less than or equal to value2. Returns FALSE if value1 is greater than value2. The field type of the arguments must be the same.",         "SVMXC_Syntax_c":"$F.LESSTHANEQUAL(value1, value2)",         "SVMXC_Example_c":"$F.IF($F.LESSTHANEQUAL($D.Labor.Discounted_Line_Price__c, 10.4), 10.5, $D.Labor.Discounted_Line_Price__c)",         "SVMXC_SM_Entity_Type_c":"FORMULA",         "SVMXC_IsStandard_c":"True",         "SVMXC_IsActive_c":"True"      },      {         "SVMXC_Type_c":"Math",         "SVMXC_Macro_Id_c":"Math_SUBTRACT_C",         "SVMXC_Macro_Name_c":"SUBTRACT",         "SVMXC_Description_c":"Subtracts value2 from value1. The values can be numbers or field identifiers of numeric fields (number, currency, percent).",         "SVMXC_Syntax_c":"$F.SUBTRACT(value1, value2)",         "SVMXC_Example_c":"$F.SUBTRACT($D.Work_Order.Total_Parts_Labor_Price__c, 5)",         "SVMXC_SM_Entity_Type_c":"FORMULA",         "SVMXC_IsStandard_c":"True",         "SVMXC_IsActive_c":"True"      },      {         "SVMXC_Type_c":"String",         "SVMXC_Macro_Id_c":"String_TOUPPER_C",         "SVMXC_Macro_Name_c":"TOUPPER",         "SVMXC_Description_c":"Returns upper case of the given string.",         "SVMXC_Syntax_c":"$F.TOUPPER(<value>)",         "SVMXC_Example_c":"$F.TOUPPER($D.WorkOrder.Id)",         "SVMXC_SM_Entity_Type_c":"OPDOC",         "SVMXC_IsStandard_c":"True",         "SVMXC_IsActive_c":"True"      },      {         "SVMXC_Type_c":"Date",         "SVMXC_Macro_Id_c":"Date_DATETIMEVALUE_C",         "SVMXC_Macro_Name_c":"DATETIMEVALUE",         "SVMXC_Description_c":"Creates a datetime in the logged in user's time zone, from its date or text representation. If the argument is a date, 12 AM in the logged in user's time zone is considered as the time to create the datetime value. When the argument is a string \/ text field, the expected format is yyyy-MM-dd HH:mm:ss or yyyy-MM-dd in the logged in user's time zone, for date and datetime values respectively.",         "SVMXC_Syntax_c":"$F.DATETIMEVALUE(expression)",         "SVMXC_Example_c":"$F.DATETIMEVALUE($F.DATE($F.YEAR($D.Work_Order.CreatedDate)+1, $F.MONTH($D.Work_Order.CreatedDate), 1))",         "SVMXC_SM_Entity_Type_c":"FORMULA",         "SVMXC_IsStandard_c":"True",         "SVMXC_IsActive_c":"True"      },      {         "SVMXC_Type_c":"Date",         "SVMXC_Macro_Id_c":"Date_DAY_C",         "SVMXC_Macro_Name_c":"DAY",         "SVMXC_Description_c":"Returns the day of the month, a number between 1 and 31, for the date or datetime value argument passed. The returned number can be set as the value of a text type field also.",         "SVMXC_Syntax_c":"$F.DAY(date or datetime)",         "SVMXC_Example_c":"$F.DAY($D.Labor.SVMXC__Start_Date_and_Time__c)",         "SVMXC_SM_Entity_Type_c":"FORMULA",         "SVMXC_IsStandard_c":"True",         "SVMXC_IsActive_c":"True"      },      {         "SVMXC_Type_c":"Logical",         "SVMXC_Macro_Id_c":"Logical_LESSTHAN_C",         "SVMXC_Macro_Name_c":"LESSTHAN",         "SVMXC_Description_c":"Compares the two arguments and returns TRUE if value1 is less than value2. Returns FALSE if value1 is equal to or greater than value2. The field type of the arguments must be the same.",         "SVMXC_Syntax_c":"$F.LESSTHAN(value1, value2)",         "SVMXC_Example_c":"$F.IF($F.LESSTHAN($D.Labor.Discounted_Line_Price__c, 10.45), 10.45, $D.Labor.Discounted_Line_Price__c)",         "SVMXC_SM_Entity_Type_c":"FORMULA",         "SVMXC_IsStandard_c":"True",         "SVMXC_IsActive_c":"True"      },      {         "SVMXC_Type_c":"String",         "SVMXC_Macro_Id_c":"String_WORD_BREAK_C",         "SVMXC_Macro_Name_c":"WORD_BREAK",         "SVMXC_Description_c":"Inserts a line break in a string of text.",         "SVMXC_Syntax_c":"$F.WORD_BREAK()",         "SVMXC_Example_c":"$F.WORD_BREAK()",         "SVMXC_SM_Entity_Type_c":"OPDOC",         "SVMXC_IsStandard_c":"True",         "SVMXC_IsActive_c":"True"      },      {         "SVMXC_Type_c":"Rollups",         "SVMXC_Macro_Id_c":"Rollups_AVGOF_C",         "SVMXC_Macro_Name_c":"AVGOF",         "SVMXC_Description_c":"Returns the average of all the numbers in the given list of numbers. The numbers are identified by the API name of the field and the list is identified by the lines section identifier. Numbers include currency and percent field types also.",         "SVMXC_Syntax_c":"$F.AVGOF(lines_section_identifier, '<field_API_name>')",         "SVMXC_Example_c":"$F.AVGOF($D.Parts, â€˜Discounted_Line_Price__câ€™)",         "SVMXC_SM_Entity_Type_c":"FORMULA",         "SVMXC_IsStandard_c":"True",         "SVMXC_IsActive_c":"True"      },      {         "SVMXC_Type_c":"Logical",         "SVMXC_Macro_Id_c":"Logical_GREATERTHAN_C",         "SVMXC_Macro_Name_c":"GREATERTHAN",         "SVMXC_Description_c":"Compares the two arguments and returns TRUE if value1 is greater than value2. Returns FALSE if value1 is equal to or less than value2. The field type of the arguments must be the same.",         "SVMXC_Syntax_c":"$F.GREATERTHAN(value1, value2)",         "SVMXC_Example_c":"$F.IF($F.GREATERTHAN($D.Labor.Discounted_Line_Price__c, 100), 100, $D.Labor.Discounted_Line_Price__c)",         "SVMXC_SM_Entity_Type_c":"FORMULA",         "SVMXC_IsStandard_c":"True",         "SVMXC_IsActive_c":"True"      },      {         "SVMXC_Type_c":"Logical",         "SVMXC_Macro_Id_c":"Logical_NOTEQUAL_C",         "SVMXC_Macro_Name_c":"NOTEQUAL",         "SVMXC_Description_c":"Compares the two arguments and returns TRUE if they are different. Returns FALSE if they are the same. The field type of the arguments must be the same.",         "SVMXC_Syntax_c":"$F.NOTEQUAL(value1, value2)",         "SVMXC_Example_c":"$F.IF($F.NOTEQUAL($D.Work_Order.SVMXC__City__c,'Los Angeles'), 'Depot Repair', $D.Work_Order.SVMXC__Order_Type__c)",         "SVMXC_SM_Entity_Type_c":"FORMULA",         "SVMXC_IsStandard_c":"True",         "SVMXC_IsActive_c":"True"      },      {         "SVMXC_Type_c":"Rollups",         "SVMXC_Macro_Id_c":"Rollups_SUMOF_C",         "SVMXC_Macro_Name_c":"SUMOF",         "SVMXC_Description_c":"Returns the sum of all the numbers in the given list of numbers. The numbers are identified by the API name of the field and the list is identified by the lines section identifier. Numbers include currency and percent field types also.",         "SVMXC_Syntax_c":"$F.SUMOF(lines_section_identifier, '<field_API_name>')",         "SVMXC_Example_c":"$F.SUMOF($D.Parts, â€˜Discounted_Line_Price__câ€™)",         "SVMXC_SM_Entity_Type_c":"FORMULA",         "SVMXC_IsStandard_c":"True",         "SVMXC_IsActive_c":"True"      },      {         "SVMXC_Type_c":"Conditional",         "SVMXC_Macro_Id_c":"Conditional_ISNULL_C",         "SVMXC_Macro_Name_c":"ISNULL",         "SVMXC_Description_c":"Shortcut $ISNULL() to check for null values. Returns True if the value is null,  false otherwise",         "SVMXC_Syntax_c":"$F.ISNULL(<value>)",         "SVMXC_Example_c":"$F.ISNULL($D.WorkOrder.Id)",         "SVMXC_SM_Entity_Type_c":"OPDOC",         "SVMXC_IsStandard_c":"True",         "SVMXC_IsActive_c":"True"      },      {         "SVMXC_Type_c":"Date",         "SVMXC_Macro_Id_c":"Date_DATEVALUE_C",         "SVMXC_Macro_Name_c":"DATEVALUE",         "SVMXC_Description_c":"Creates a date in the logged in user's time zone, from its datetime or text representation. When the argument is a string \/ text field, the expected format is yyyy-MM-dd HH:mm:ss or yyyy-MM-dd in the logged in user's time zone, for date and datetime values respectively.",         "SVMXC_Syntax_c":"$F.DATEVALUE(expression)",         "SVMXC_Example_c":"$F.DATEVALUE($D.Labor.SVMXC__Start_Date_and_Time__c)",         "SVMXC_SM_Entity_Type_c":"FORMULA",         "SVMXC_IsStandard_c":"True",         "SVMXC_IsActive_c":"True"      },      {         "SVMXC_Type_c":"Date",         "SVMXC_Macro_Id_c":"Date_DATEDIFF_C",         "SVMXC_Macro_Name_c":"DATEDIFF",         "SVMXC_Description_c":"Returns the difference between two date or datetime fields in days\/weeks\/months\/years. The value returned will be negative if value2 is greater than value1. unit_of_difference must be INDAYS, INWEEKS, INMONTHS, or INYEARS. The returned number can be set as the value of a text type field also.",         "SVMXC_Syntax_c":"$F.DATEDIFF(date1,date2,option)",         "SVMXC_Example_c":"$F.DATEDIFF($D.Work_Order.SVMXC__Completed_Date_Time__c, $D.Work_Order.SVMXC__Actual_Initial_Response__c, 'INDAYS')",         "SVMXC_SM_Entity_Type_c":"FORMULA",         "SVMXC_IsStandard_c":"True",         "SVMXC_IsActive_c":"True"      },      {         "SVMXC_Type_c":"Math",         "SVMXC_Macro_Id_c":"Math_DIVIDE_C",         "SVMXC_Macro_Name_c":"DIVIDE",         "SVMXC_Description_c":"Divides the dividend by divisor (dividend \/ divisor). The values can be numbers or field identifiers of numeric fields (number, currency, percent).",         "SVMXC_Syntax_c":"$F.DIVIDE((value1, value2))",         "SVMXC_Example_c":"$F.DIVIDE($D.Labor.Calculated_Line_Price__c, 2)",         "SVMXC_SM_Entity_Type_c":"FORMULA",         "SVMXC_IsStandard_c":"True",         "SVMXC_IsActive_c":"True"      },	  {	   "SVMXC_Type_c":"Logical",	   "SVMXC_Macro_Id_c":"Logical_SETNULL_C",	   "SVMXC_Macro_Name_c":"SETNULL",	   "SVMXC_Description_c":"To set the field value to null.",	   "SVMXC_Syntax_c":"$F.SETNULL()",	   "SVMXC_Example_c":"$F.SETNULL()",	   "SVMXC_SM_Entity_Type_c":"FORMULA;OPDOC",	   "SVMXC_IsStandard_c":"True",	   "SVMXC_IsActive_c":"True"	}   ]}
