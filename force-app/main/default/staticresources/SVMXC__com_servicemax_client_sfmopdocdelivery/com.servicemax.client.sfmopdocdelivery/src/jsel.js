/** * This file needs a description * @class com.servicemax.client.sfmopdocdelivery.jsel * @singleton * @author unknown * * @copyright 2013 ServiceMax, Inc. */(function(){	var jseeImpl = SVMX.Package("com.servicemax.client.sfmopdocdelivery.jsel");	jseeImpl.Class("JSExpressionEngine", com.servicemax.client.lib.api.Object, {		__interceptors : null, __de : null,		__constructor : function(engine) { this.__interceptors = {}; this.__de = engine;},		addInterceptor : function(macroName, interceptor, context){			this.__interceptors[macroName] = {interceptor : interceptor, context : context};		},		initialize : function(params){			var me = this;			// set up the context roots			var props = {};			var i = 0, cr = params.contextRoots, l = cr.length;			for(i = 0; i < l; i++){				eval("var " + cr[i] + " = {};");			}			this.addContext = function(context, root){				var r = eval(root);				for(var name in context){					var value = context[name];					r[name] = value;				}			};			this.setProperty = function(key, value) {				props[key] = value;			};			this.getProperty = function(key) {				return props[key];			};			this.isEntryCriteriaForSection = function(section){				var isExist = true;				if(section.sectionDetail){					var isInclude = section.sectionDetail[SVMX.OrgNamespace + "__Entry_Criteria__c"] || false;					isExist = !isInclude;				}				return isExist;			}			//Filtring question based on server configuration.			this.filterSkippedSection = function(responseJson, metaJson) {				if(metaJson){					//filter data part from here					var answerObject = SVMX.toObject(responseJson);				    var questionObejct = SVMX.toObject(metaJson);				    var sections = questionObejct.page.header.sections;				    var sectionsLength = sections.length;				    var fileterSection = [];				    for( var sectionIndex = 0; sectionIndex < sectionsLength; sectionIndex++ ) {				    	var section = sections[sectionIndex];				    	var isIncludeSection = this.isEntryCriteriaForSection(section);				    	if(isIncludeSection){				    		if(section.fields.length > 0){				    			var Question = SVMX.toObject(section.fields[0].fieldDetail[SVMX.OrgNamespace + '__QuestionInfoJSON__c']);				    			if(Question.question && Question.question.questionID) {					    				if(answerObject.hasOwnProperty(Question.question.questionID)){				    					fileterSection.push(section);				    				}				    			}				    		} else {				    			fileterSection.push(section);				    		}				    	}				    }				    questionObejct.page.header.sections = fileterSection;				    return questionObejct;				}				return SVMX.toObject(metaJson);			}			this.getAttachmentIDFromQuestionID = function(questionID,recordID){				var attachments = this.getProperty("allChecklistAttachment");				var attachmentObject;				if(attachments){					var attachmentList = attachments[recordID];					if(attachmentList){						var attachmentsLength = attachmentList.length;						for (var attachmentIndex = 0; attachmentIndex < attachmentsLength; attachmentIndex++) {							var attachment = attachmentList[attachmentIndex];							if(attachment[SVMX.OrgNamespace+'__SM_Internal_Question_ID__c'] === questionID){								attachmentObject = attachment;								break;							}						}					}				}				return attachmentObject;			}			this.getMediaContainer = function(question, attachmentID, description, isfileTypeIsImage, fileName, filePath){				var imageTag;				var image;				var dec;				if(description){					description = this.htmlEntities(description);				}				if(fileName){					fileName = this.htmlEntities(fileName);				}				var Question = '<tr><tr><td align="left" width="100%" border="1" style="word-break:break-word;word-wrap:break-word; border-bottom:1px solid #6e6e6e;" svmx-data="{{$F.IMAGE('+ fileName +')}}" >' + question + '</td></tr>';				if(isfileTypeIsImage){					if (filePath !== undefined) {						if(filePath === '') {		           			image = '<tr><td align="left" width="100%" style="word-break:break-word;word-wrap:break-word; border:0pt solid black;">'+fileName+'</td></tr></tr>';	           				dec = '<tr><td align="left" width="100%" style="word-break:break-word;word-wrap:break-word; border:0pt solid black;">'+description+'</td></tr></tr>';	         			} 	         			else {	           				imageTag = '<img alt=" " align="middle" style="max-width:100%" space="10" vspace="10" src="'+filePath+'" svmx-data="'+fileName+'">';	           				image = '<tr><td align="center" width="100%" style="word-break:break-word;word-wrap:break-word; border:0pt solid black;">'+imageTag+'</td></tr></tr>';	           				dec = '<tr><td align="center" width="100%" style="word-break:break-word;word-wrap:break-word; border:0pt solid black;">'+description+'</td></tr></tr>';	         			}					} else {						imageTag = '<img alt=" " align="middle" hspace="10" vspace="10" src="/servlet/servlet.FileDownload?file=' + attachmentID + '">';						image = '<tr><td align="center" width="100%" style="word-break:break-word;word-wrap:break-word; border:0pt solid black;">' + imageTag + '</td></tr></tr>';						dec = '<tr><td align="center" width="100%" style="word-break:break-word;word-wrap:break-word; border:0pt solid black;">' + description + '</td></tr></tr>';					}									} else {					image = '<tr><td align="left" width="100%" style="word-break:break-word;word-wrap:break-word; border:0pt solid black;">' + fileName + '</td></tr></tr>';					dec = '<tr><td align="left" width="100%" style="word-break:break-word;word-wrap:break-word; border:0pt solid black;">' + description + '</td></tr></tr>';				}				return  '<tr><td colspan="2"><table width="100%" border="0" cellpadding="0" cellspacing="0" style="table-layout:auto background-color:red">' + Question + image + dec + '</table></td></tr>';			}			this.htmlEntities = function(str) {			    return String(str).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;');			}			this.getNonmediaContainer = function(question, answer){				if(answer){					answer = this.htmlEntities(answer);				}								if(question){					question = this.htmlEntities(question);				}								return '<tr><td align="left" width="55%" style="word-break:break-word;word-wrap:break-word;">' + question + '</td><td align="left" width="45%" style="word-break:break-word;word-wrap:break-word;">' + answer + '</td></tr>';			}			this.evalExpression = function(expr, params)			{				/////////////////////// MACROS //////////////////////////////////				// !!! ALL THE MACROS MUST GO WITH IN THIS BLOCK !!!!				function $MODIFY(value){					return "Modified " + value;				}				function $BOOL(value){					return !!value;				}				function $ISNULL(value){					if(!value) return true;					else return false;				}				function $ADD(){					var ret = 0, i = 0, l = arguments.length;					for(i = 0; i < l; i++){						ret += arguments[i];					}					return ret;				}				function $INT(value){					var parsedValue = parseInt(value);					if(isNaN(parsedValue)) parsedValue = 0;					return parsedValue;				}				function $FLOAT(value){					var parsedValue = parseFloat(value);					if(isNaN(parsedValue)) parsedValue = 0;					return parsedValue;				}				function $TOUPPER(value){					if(value && typeof(value) === 'object' && value.value){						return value.value.toUpperCase();					}					return value.toUpperCase();				}				function $IMAGE(value){					if(me.__interceptors["$IMAGE"]){						return me.__interceptors["$IMAGE"].interceptor(value, params);					}else{						// TODO:						return '/servlet/servlet.FileDownload?file=' + value;					}				}				function $LOGO(){					if(me.__interceptors["$IMAGE"]){						return me.__interceptors["$IMAGE"].interceptor("LOGO", params);					}else{						// TODO:						return '/servlet/servlet.FileDownload?file=' + value;					}				}				function $SIGNATURE(uniqueName, title, isMandatory, width, height){					//TODO: Cleanup/destroy functions when done with them					var uniqueId = $(me.__de.__rootNode).attr('id').replace(/-/g, '_');					var handlerName = 'handleOutputDocSignatureButtonClick'+ uniqueId;					SVMX[handlerName] = function(event){						var evtLocal = event.target;						var uniqueNameLocal = null, imgHeight = null, imgWidth = null;						if(evtLocal){							uniqueNameLocal = $(event.target).attr("signature-name");							imgHeightLocal = $(event.target).attr("imgHeight");							imgWidthLocal = $(event.target).attr("imgWidth");						}						var evt = SVMX.create("com.servicemax.client.lib.api.Event",							"SFMOPDOCDELIVERY.CAPTURE_SIGNATURE", me.__de,{								request : {									//handler 		 : onCaptureSignature,									handler 		 : SVMX.proxy(me.__de, me.__de.__onCaptureSignature),									processId 		 : me.__de.getProcessId(),									recordId 		 : me.__de.getRecordId(),									uniqueName 		 : uniqueNameLocal,									imgHeight		 : imgHeightLocal,									imgWidth		 : imgWidthLocal								}							});						me.__de.getEventBus().triggerEvent(evt);    				};					var onCaptureSignature = function(data){						me.__de.__onCaptureSignature(data);					};					var returnTag = "";					if(me.__de.__allowSignatures != null && me.__de.__allowSignatures === true){						title = title && title != null && title.length > 0 ? title : uniqueName;						if(uniqueName){							if(me.__de.createSignatureButtons)							{								returnTag =  me.__de.createSignatureButtons.handler.apply(										 me.__de.createSignatureButtons.context,										 [uniqueName, uniqueId, isMandatory, height, width, handlerName, title]								);							}							else {								var defaultHeight = '186px';              	var defaultWidth = '350px';              	defaultHeight = (height != undefined && height != null && height.length > 0) ? height + 'px' : defaultHeight;              	defaultWidth = (width != undefined && width != null && width.length > 0) ? width + 'px' : defaultWidth;								returnTag = "svmx-signature-start<div id='" + uniqueName + uniqueId +  "'>"		                    + "<button style='min-width:50px; height:40px;' signature-name='"+ uniqueName + uniqueId + "' imgHeight='"+ defaultHeight +"' imgWidth='"+ defaultWidth +"' onclick='SVMX." + handlerName + "(event);'>"+ title +"</button>"		                    + "</div>svmx-signature-end";							}						}					}					if(isMandatory !== undefined && isMandatory.toString().toLowerCase() === "true"){						me.__de.__signaturesPending.addItem(uniqueName+uniqueId, uniqueName+uniqueId);					}					return returnTag;				}				function $URL(value){				}				function $IF(condition, truthy, falsey){					if(typeof condition == "string")					{						if(condition == "false")							condition = false;					}					if(condition){						return truthy;					}else{						return falsey;					}				}				function $SUMOF(list, fieldName, options){					var total = 0;					var aliasName = "";					var dataType = "";					if(list.length > 0){						aliasName = list[0]["aliasName"];					}					if($M[aliasName] !== undefined && $M[aliasName] != null							&& $M[aliasName][fieldName] !== undefined && $M[aliasName][fieldName] !== null							&& $M[aliasName][fieldName]["dataType"] !== undefined && $M[aliasName][fieldName]["dataType"] !== null) {						dataType = $M[aliasName][fieldName]["dataType"];					}					for(i = 0; i < list.length; i++){						var value = list[i][fieldName];						if(dataType === "picklist" || dataType === "multipicklist"){							value = list[i][fieldName]["value"];						}						total += $FLOAT(value);					}					if($M[aliasName] !== undefined && $M[aliasName] != null								&& $M[aliasName][fieldName] !== undefined && $M[aliasName][fieldName] !== null) {						var scale = $M[aliasName][fieldName]["scale"];						total = total.toFixed(scale);					}					return total;				}				function $FORMAT(){					if(arguments.length == 0 ) return "";					var formatted = arguments[0];	// first parameter is the string to be formated				    for (var i = 1; i < arguments.length; i++) {				        var regexp = new RegExp('\\{'+ (i - 1) +'\\}', 'gi');				        formatted = formatted.replace(regexp,										arguments[i] !== undefined && arguments[i] !== null ? arguments[i] : "" );				    }				    return formatted;				}				function $TODAY(){					if(me.getProperty('Today')) {						return me.getProperty('Today');					}				}				function $TOMORROW(){					if(me.getProperty('Tomorrow')) {						return me.getProperty('Tomorrow');					}				}				function $NOW(){					if(me.getProperty('Now')) {						return me.getProperty('Now');					}				}				function $YESTERDAY(){					if(me.getProperty('Yesterday')) {						return me.getProperty('Yesterday');					}				}				function $USERNAME() {					if(me.getProperty('UserName')) {						return me.getProperty('UserName');					}				}				function $ADDRESS() {					if(me.getProperty('Address')) {						return me.getProperty('Address');					}				}				function $LNUMBER(value,scale) {					var parsedValue = parseFloat(value);					var formattedValue = value;					if (!isNaN(parsedValue)) {						var locale = me.getProperty('Locale');						var utils = com.servicemax.client.sfmopdocdelivery.utils.SFMOPDOCUtils;						formattedValue = utils.localeFormat(locale, parsedValue,scale);					}					return formattedValue;				}				function $ROUND(value, places){					var multiplier = Math.pow(10, places);    				return (Math.round(value * multiplier) / multiplier);				}				function $SNUMBER(record, fieldName, scale){					var aliasName = record.aliasName;					var scale = parseInt(scale);					var value = $D[aliasName][fieldName];					var parsedValue = parseFloat(value);					if(isNaN(parsedValue)) return value;					if(scale !== undefined && scale !== null && !isNaN(scale)) {						parsedValue = parsedValue.toFixed(scale);					} else if($M[aliasName] !== undefined && $M[aliasName] != null									&& $M[aliasName][fieldName] !== undefined && $M[aliasName][fieldName] !== null){						scale = $M[aliasName][fieldName]["scale"]						parsedValue = parsedValue.toFixed(scale);					}					return parsedValue;				}				function $CHECKLIST( responseJson, metaJson, recordID) {					var metaObj;					if(me.getProperty('includeSkippedSections') === false) {						metaObj = me.filterSkippedSection(responseJson, metaJson);					} else {						metaObj = SVMX.toObject(metaJson);					}					var responseObj = SVMX.toObject(responseJson);					var sectionsLength = metaObj.page.header.sections.length;					var processTitle = metaObj.page.processTitle || metaObj.processTitle;					var retValue = '<table width="100%" border="1" cellpadding="0" cellspacing="0" style="table-layout:fixed"><tr><th width="100%" style="background-color:#BDBDBD" align="left"><strong>' + me.__de.__getTagValue("SFM004_TAG009") + ' ' + processTitle + '</strong></th></tr>';					for( var i = 0; i < sectionsLength; i++ ) {						var section = metaObj.page.header.sections[i];						if(section.fields && section.fields.length >0) {							retValue += '<table width="100%" border="1" cellpadding="0" cellspacing="0" style="table-layout:fixed"><tr><td width="100%" align="left" style="background-color:#6E6E6E;word-break:break-word;word-wrap:break-word;border: 1px solid black;"><strong style="color:#FFFFFF">'+ me.__de.__getTagValue("SFM004_TAG010") + '-' + section.sectionDetail[ SVMX.OrgNamespace + '__Title__c' ] + '</strong></td></tr></table>';							retValue += '<tr><td style="word-break:break-word;word-wrap:break-word;"><table width="100%" border="1" cellpadding="0" cellspacing="0" style="table-layout:fixed">';							retValue += '<tr><th align="left" style="background-color:#D8D8D8"><strong>' + me.__de.__getTagValue("SFM004_TAG011") + '</strong></th><th align="left" width="45%" style="background-color:#D8D8D8"><strong>'+ me.__de.__getTagValue("SFM004_TAG012") + '</strong></th></tr>';							retValue += '</table></td></tr><table width="100%" border="1" cellpadding="0" cellspacing="0" style="table-layout:auto">';							var fieldsLength = section.fields.length;							for( var j = 0; j < fieldsLength; j++ ) {								var field = section.fields[j];								var questionInfoObject = SVMX.toObject(field.fieldDetail[ SVMX.OrgNamespace + '__QuestionInfoJSON__c']);								var formattedValue = responseObj[questionInfoObject.question.questionID];								if( formattedValue && questionInfoObject.question.responseType ) {									if (questionInfoObject.question.responseType.toLowerCase() == 'datetime') {										formattedValue = com.servicemax.client.lib.datetimeutils.DatetimeUtil.convertToTimezone(formattedValue, me.getProperty("userTimezoneOffset"));										formattedValue = com.servicemax.client.lib.datetimeutils.DatetimeUtil.getFormattedDatetime(formattedValue,me.__de.__dateFormat + " " + me.__de.__timeFormat);									} else if (questionInfoObject.question.responseType.toLowerCase() == 'date') {										formattedValue = com.servicemax.client.lib.datetimeutils.DatetimeUtil.getFormattedDatetime(formattedValue, me.__de.__dateFormat);									}								}								if(formattedValue && formattedValue instanceof Array){									formattedValue = formattedValue.join(', ');								}								else if(formattedValue && formattedValue instanceof Object){									formattedValue = formattedValue["fieldvalue"]["value"];								}								else if (formattedValue === undefined || formattedValue === null) {									//If there is no answer then putting blank string.     									formattedValue = '';								}								if(questionInfoObject.question.responseType.toLowerCase() === 'attachment' && questionInfoObject.question.ShowInSmartDoc){									var attachmentFileID = '';									var fileName = '';									var filePath = '';									var attachmentObject = me.getAttachmentIDFromQuestionID(questionInfoObject.question.questionID,recordID);									if(attachmentObject){										var isfileTypeIsImage = false;										fileName = attachmentObject[SVMX.OrgNamespace+'__SM_Attachment_Name__c'];										filePath = attachmentObject['filePath'];										if(attachmentObject[SVMX.OrgNamespace+'__SM_File_Type__c'] && attachmentObject[SVMX.OrgNamespace+'__SM_File_Type__c'].toLowerCase() === 'image'){											isfileTypeIsImage = true;											attachmentFileID = attachmentObject[SVMX.OrgNamespace+'__SM_Attachment_ID__c'];										}									}									retValue += me.getMediaContainer(questionInfoObject.question.question, attachmentFileID, formattedValue, isfileTypeIsImage, fileName, filePath);								}else {									retValue += me.getNonmediaContainer(questionInfoObject.question.question, formattedValue);								}							}							retValue += '</table>';						}					}					retValue += '</table>';					//var questionInfoObject = SVMX.toObject(metaObj.page.header.sections[0].fields[0].fieldDetail.SVMXC__QuestionInfoJSON__c);					//return JSON.stringify(responseObj);					return retValue;				}				var $F = {	BOOL : $BOOL, 	ISNULL : $ISNULL, 	ADD : $ADD, 		INT : $INT, 		TOUPPER : $TOUPPER, 	IMAGE : $IMAGE,								IF : $IF, 		SUMOF : $SUMOF,	FORMAT : $FORMAT, 	TODAY : $TODAY, 	TOMORROW : $TOMORROW, 	YESTERDAY : $YESTERDAY,								NOW : $NOW , USERNAME : $USERNAME, LOGO : $LOGO, ADDRESS : $ADDRESS, LNUMBER : $LNUMBER, ROUND : $ROUND, SIGNATURE : $SIGNATURE,								SNUMBER: $SNUMBER,								CHECKLIST: $CHECKLIST};				////////////////////// END MACROS ///////////////////////////////				try {					var result = eval(expr);					if(result && typeof(result) === 'object'){						if(result.label !== undefined && result.label !== null								&& result.value !== undefined && result.value !== null){							result = result.value;						}else if(result.Id){							result = result.Id;						}					}					return result;				} catch(e) {					return '';					//debugger;				}			};		}	}, {});})();// end of file