var stateService;var stateChangeCalled;QUnit.module("StateManager",{setup:function(){stateService=SVMX.create("com.servicemax.client.sfmconsole.utils.StateService");stateService.triggerStateChange=function(a){stateChangeCalled=a||"STATE_CHANGE";};},teardown:function(){stateService=null;stateChangeCalled=false;}});test("constructor",function(){equal(stateService.getState(),undefined,"State stack is empty");equal(stateService.getIndex(),0,"State index is zero");});test("pushState",function(){var a=stateService.pushState({title:"test",subtitle:"subtest"});var b=stateService.getState();equal(a.title,"test","State property exists");equal(b.title,a.title,"Current state title is set");equal(stateChangeCalled,"STATE_CHANGE","State change event triggered");});test("replaceState",function(){var a=stateService.pushState({title:"test1"});var c=stateService.replaceState({title:"test2"});var b=stateService.getState();equal(a.index,c.index,"New state has same index as orig");equal(b.title,"test2","Current state title should be replaced");equal(stateChangeCalled,"STATE_CHANGE","State change event triggered");});test("modifyState",function(){var b=stateService.pushState({title:"test1"});var a=stateService.modifyState({title:"test2"});var c=stateService.getState();equal(b.index,a.index,"New state has same index as modified");equal(c.title,"test2","Current state title should be replaced");equal(stateChangeCalled,"STATE_MODIFIED","State change event triggered");});test("getState",function(){var a=stateService.pushState({title:"test",subtitle:"subtest"});var b=stateService.getState();equal(b.title,a.title,"State title is the same as pushed");equal(b.index,a.index,"State index is the same as pushed");});test("getIndex",function(){stateService.pushState({title:"test1"});stateService.pushState({title:"test2"});var a=stateService.getIndex();equal(a,1,"Current index is 1 after 2 state pushes");});test("back",function(){stateService.pushState({title:"test"});stateService.pushState({title:"test2"});stateService.back();var a=stateService.getIndex();equal(a,0,"State index is 0 after back");equal(stateChangeCalled,"STATE_CHANGE","State change event triggered");});test("forward",function(){stateService.pushState({title:"test"});stateService.pushState({title:"test2"});stateService.back();stateService.forward();var a=stateService.getIndex();equal(a,1,"State index is 1 after back and forward");equal(stateChangeCalled,"STATE_CHANGE","State change event triggered");});test("go",function(){stateService.pushState({title:"test"});stateService.pushState({title:"test2"});stateService.go(-1);var a=stateService.getIndex();equal(a,0,"State index is 0 after go");equal(stateChangeCalled,"STATE_CHANGE","State change event triggered");});